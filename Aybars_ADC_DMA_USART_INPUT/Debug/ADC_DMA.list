
ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c74  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004e24  08004e24  00014e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f14  08004f14  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004f14  08004f14  00014f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f1c  08004f1c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f1c  08004f1c  00014f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f20  08004f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000012c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000019c  2000019c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad40  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019c9  00000000  00000000  0002ade0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e0  00000000  00000000  0002c7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000748  00000000  00000000  0002cf90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002331e  00000000  00000000  0002d6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ff7  00000000  00000000  000509f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc2b6  00000000  00000000  0005a9ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00136ca3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000244c  00000000  00000000  00136cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004e0c 	.word	0x08004e0c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004e0c 	.word	0x08004e0c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96e 	b.w	8000d60 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468c      	mov	ip, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f040 8083 	bne.w	8000bb2 <__udivmoddi4+0x116>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4617      	mov	r7, r2
 8000ab0:	d947      	bls.n	8000b42 <__udivmoddi4+0xa6>
 8000ab2:	fab2 f282 	clz	r2, r2
 8000ab6:	b142      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	f1c2 0020 	rsb	r0, r2, #32
 8000abc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ac0:	4091      	lsls	r1, r2
 8000ac2:	4097      	lsls	r7, r2
 8000ac4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ad4:	fa1f fe87 	uxth.w	lr, r7
 8000ad8:	fb08 c116 	mls	r1, r8, r6, ip
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aee:	f080 8119 	bcs.w	8000d24 <__udivmoddi4+0x288>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8116 	bls.w	8000d24 <__udivmoddi4+0x288>
 8000af8:	3e02      	subs	r6, #2
 8000afa:	443b      	add	r3, r7
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b04:	fb08 3310 	mls	r3, r8, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	193c      	adds	r4, r7, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1a:	f080 8105 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	f240 8102 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000b24:	3802      	subs	r0, #2
 8000b26:	443c      	add	r4, r7
 8000b28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b2c:	eba4 040e 	sub.w	r4, r4, lr
 8000b30:	2600      	movs	r6, #0
 8000b32:	b11d      	cbz	r5, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c5 4300 	strd	r4, r3, [r5]
 8000b3c:	4631      	mov	r1, r6
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	b902      	cbnz	r2, 8000b46 <__udivmoddi4+0xaa>
 8000b44:	deff      	udf	#255	; 0xff
 8000b46:	fab2 f282 	clz	r2, r2
 8000b4a:	2a00      	cmp	r2, #0
 8000b4c:	d150      	bne.n	8000bf0 <__udivmoddi4+0x154>
 8000b4e:	1bcb      	subs	r3, r1, r7
 8000b50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b54:	fa1f f887 	uxth.w	r8, r7
 8000b58:	2601      	movs	r6, #1
 8000b5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b5e:	0c21      	lsrs	r1, r4, #16
 8000b60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b68:	fb08 f30c 	mul.w	r3, r8, ip
 8000b6c:	428b      	cmp	r3, r1
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000b70:	1879      	adds	r1, r7, r1
 8000b72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0xe2>
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	f200 80e9 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000b7e:	4684      	mov	ip, r0
 8000b80:	1ac9      	subs	r1, r1, r3
 8000b82:	b2a3      	uxth	r3, r4
 8000b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b90:	fb08 f800 	mul.w	r8, r8, r0
 8000b94:	45a0      	cmp	r8, r4
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x10c>
 8000b98:	193c      	adds	r4, r7, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x10a>
 8000ba0:	45a0      	cmp	r8, r4
 8000ba2:	f200 80d9 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	eba4 0408 	sub.w	r4, r4, r8
 8000bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bb0:	e7bf      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d909      	bls.n	8000bca <__udivmoddi4+0x12e>
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	f000 80b1 	beq.w	8000d1e <__udivmoddi4+0x282>
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	4631      	mov	r1, r6
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	fab3 f683 	clz	r6, r3
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d14a      	bne.n	8000c68 <__udivmoddi4+0x1cc>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0x140>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 80b8 	bhi.w	8000d4c <__udivmoddi4+0x2b0>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb61 0103 	sbc.w	r1, r1, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	468c      	mov	ip, r1
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d0a8      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000bea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bee:	e7a5      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000bf0:	f1c2 0320 	rsb	r3, r2, #32
 8000bf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000bf8:	4097      	lsls	r7, r2
 8000bfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000bfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c02:	40d9      	lsrs	r1, r3
 8000c04:	4330      	orrs	r0, r6
 8000c06:	0c03      	lsrs	r3, r0, #16
 8000c08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c0c:	fa1f f887 	uxth.w	r8, r7
 8000c10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c18:	fb06 f108 	mul.w	r1, r6, r8
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x19c>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c2a:	f080 808d 	bcs.w	8000d48 <__udivmoddi4+0x2ac>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 808a 	bls.w	8000d48 <__udivmoddi4+0x2ac>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b281      	uxth	r1, r0
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c48:	fb00 f308 	mul.w	r3, r0, r8
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x1c4>
 8000c50:	1879      	adds	r1, r7, r1
 8000c52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c56:	d273      	bcs.n	8000d40 <__udivmoddi4+0x2a4>
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d971      	bls.n	8000d40 <__udivmoddi4+0x2a4>
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	4439      	add	r1, r7
 8000c60:	1acb      	subs	r3, r1, r3
 8000c62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c66:	e778      	b.n	8000b5a <__udivmoddi4+0xbe>
 8000c68:	f1c6 0c20 	rsb	ip, r6, #32
 8000c6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c74:	431c      	orrs	r4, r3
 8000c76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c86:	431f      	orrs	r7, r3
 8000c88:	0c3b      	lsrs	r3, r7, #16
 8000c8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c8e:	fa1f f884 	uxth.w	r8, r4
 8000c92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c9e:	458a      	cmp	sl, r1
 8000ca0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ca4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x220>
 8000caa:	1861      	adds	r1, r4, r1
 8000cac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cb0:	d248      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000cb2:	458a      	cmp	sl, r1
 8000cb4:	d946      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000cb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cba:	4421      	add	r1, r4
 8000cbc:	eba1 010a 	sub.w	r1, r1, sl
 8000cc0:	b2bf      	uxth	r7, r7
 8000cc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cce:	fb00 f808 	mul.w	r8, r0, r8
 8000cd2:	45b8      	cmp	r8, r7
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x24a>
 8000cd6:	19e7      	adds	r7, r4, r7
 8000cd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cdc:	d22e      	bcs.n	8000d3c <__udivmoddi4+0x2a0>
 8000cde:	45b8      	cmp	r8, r7
 8000ce0:	d92c      	bls.n	8000d3c <__udivmoddi4+0x2a0>
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	4427      	add	r7, r4
 8000ce6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cea:	eba7 0708 	sub.w	r7, r7, r8
 8000cee:	fba0 8902 	umull	r8, r9, r0, r2
 8000cf2:	454f      	cmp	r7, r9
 8000cf4:	46c6      	mov	lr, r8
 8000cf6:	4649      	mov	r1, r9
 8000cf8:	d31a      	bcc.n	8000d30 <__udivmoddi4+0x294>
 8000cfa:	d017      	beq.n	8000d2c <__udivmoddi4+0x290>
 8000cfc:	b15d      	cbz	r5, 8000d16 <__udivmoddi4+0x27a>
 8000cfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000d02:	eb67 0701 	sbc.w	r7, r7, r1
 8000d06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d0a:	40f2      	lsrs	r2, r6
 8000d0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d10:	40f7      	lsrs	r7, r6
 8000d12:	e9c5 2700 	strd	r2, r7, [r5]
 8000d16:	2600      	movs	r6, #0
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e70b      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e9      	b.n	8000afc <__udivmoddi4+0x60>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6fd      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d2c:	4543      	cmp	r3, r8
 8000d2e:	d2e5      	bcs.n	8000cfc <__udivmoddi4+0x260>
 8000d30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d34:	eb69 0104 	sbc.w	r1, r9, r4
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7df      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e7d2      	b.n	8000ce6 <__udivmoddi4+0x24a>
 8000d40:	4660      	mov	r0, ip
 8000d42:	e78d      	b.n	8000c60 <__udivmoddi4+0x1c4>
 8000d44:	4681      	mov	r9, r0
 8000d46:	e7b9      	b.n	8000cbc <__udivmoddi4+0x220>
 8000d48:	4666      	mov	r6, ip
 8000d4a:	e775      	b.n	8000c38 <__udivmoddi4+0x19c>
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	e74a      	b.n	8000be6 <__udivmoddi4+0x14a>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	4439      	add	r1, r7
 8000d56:	e713      	b.n	8000b80 <__udivmoddi4+0xe4>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	443c      	add	r4, r7
 8000d5c:	e724      	b.n	8000ba8 <__udivmoddi4+0x10c>
 8000d5e:	bf00      	nop

08000d60 <__aeabi_idiv0>:
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	0000      	movs	r0, r0
	...

08000d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b0c4      	sub	sp, #272	; 0x110
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6e:	f000 fbf7 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d72:	f000 f913 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d76:	f000 fa17 	bl	80011a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d7a:	f000 f9f5 	bl	8001168 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d7e:	f000 f977 	bl	8001070 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8000d82:	f000 f9c7 	bl	8001114 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t errorMsg[50]={'\0'};
 8000d86:	2300      	movs	r3, #0
 8000d88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000d8c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000d90:	222e      	movs	r2, #46	; 0x2e
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f003 fc03 	bl	80045a0 <memset>
  uint8_t input[100]={'\0'};
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d9e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000da2:	2260      	movs	r2, #96	; 0x60
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f003 fbfa 	bl	80045a0 <memset>
  uint8_t adcData[50]={'\0'};
 8000dac:	2300      	movs	r3, #0
 8000dae:	647b      	str	r3, [r7, #68]	; 0x44
 8000db0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000db4:	222e      	movs	r2, #46	; 0x2e
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f003 fbf1 	bl	80045a0 <memset>
  uint8_t adcVoltage[50]={'\0'};
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	222e      	movs	r2, #46	; 0x2e
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 fbe7 	bl	80045a0 <memset>
  uint16_t X=0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  uint16_t voltage[1];
  char answer[10]={'\0'};
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	3304      	adds	r3, #4
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	809a      	strh	r2, [r3, #4]
  HAL_ADC_Start_DMA(&hadc1, adcRawData, 1);
 8000de6:	2201      	movs	r2, #1
 8000de8:	4965      	ldr	r1, [pc, #404]	; (8000f80 <main+0x218>)
 8000dea:	4866      	ldr	r0, [pc, #408]	; (8000f84 <main+0x21c>)
 8000dec:	f000 fc92 	bl	8001714 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  X = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	  answer[0]='\0';
 8000df6:	463b      	mov	r3, r7
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
	  while(answer[0] == '\0'){
 8000dfc:	e0b0      	b.n	8000f60 <main+0x1f8>
		  HAL_UART_Receive(&huart6, answer, sizeof(answer), 1000);
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e04:	220a      	movs	r2, #10
 8000e06:	4860      	ldr	r0, [pc, #384]	; (8000f88 <main+0x220>)
 8000e08:	f002 fc75 	bl	80036f6 <HAL_UART_Receive>
		  sprintf(input, "Press 'a' to get ADC value or press 'v' to get voltage value %c\n", X, answer[0]);
 8000e0c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8000e10:	463b      	mov	r3, r7
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8000e18:	495c      	ldr	r1, [pc, #368]	; (8000f8c <main+0x224>)
 8000e1a:	f003 fbc9 	bl	80045b0 <siprintf>
		  HAL_UART_Transmit(&huart6, input, sizeof(input), 100);
 8000e1e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000e22:	2364      	movs	r3, #100	; 0x64
 8000e24:	2264      	movs	r2, #100	; 0x64
 8000e26:	4858      	ldr	r0, [pc, #352]	; (8000f88 <main+0x220>)
 8000e28:	f002 fbd3 	bl	80035d2 <HAL_UART_Transmit>
		  HAL_Delay(500);
 8000e2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e30:	f000 fc08 	bl	8001644 <HAL_Delay>


	  while(answer[0] == 'a'){
 8000e34:	e023      	b.n	8000e7e <main+0x116>
		  sprintf(adcData, "[%d] ADC Value = %d\n", X, adcRawData[0]);
 8000e36:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8000e3a:	4b51      	ldr	r3, [pc, #324]	; (8000f80 <main+0x218>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000e44:	4952      	ldr	r1, [pc, #328]	; (8000f90 <main+0x228>)
 8000e46:	f003 fbb3 	bl	80045b0 <siprintf>
		  HAL_UART_Transmit(&huart6, adcData, sizeof(adcData), 100);
 8000e4a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000e4e:	2364      	movs	r3, #100	; 0x64
 8000e50:	2232      	movs	r2, #50	; 0x32
 8000e52:	484d      	ldr	r0, [pc, #308]	; (8000f88 <main+0x220>)
 8000e54:	f002 fbbd 	bl	80035d2 <HAL_UART_Transmit>
		  X++;
 8000e58:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
		  HAL_Delay(500);
 8000e62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e66:	f000 fbed 	bl	8001644 <HAL_Delay>
		  HAL_UART_Receive(&huart6, answer, sizeof(answer), 250);
 8000e6a:	4639      	mov	r1, r7
 8000e6c:	23fa      	movs	r3, #250	; 0xfa
 8000e6e:	220a      	movs	r2, #10
 8000e70:	4845      	ldr	r0, [pc, #276]	; (8000f88 <main+0x220>)
 8000e72:	f002 fc40 	bl	80036f6 <HAL_UART_Receive>
		  if(answer[0] == 'q'){
 8000e76:	463b      	mov	r3, r7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b71      	cmp	r3, #113	; 0x71
 8000e7c:	d004      	beq.n	8000e88 <main+0x120>
	  while(answer[0] == 'a'){
 8000e7e:	463b      	mov	r3, r7
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b61      	cmp	r3, #97	; 0x61
 8000e84:	d0d7      	beq.n	8000e36 <main+0xce>
 8000e86:	e044      	b.n	8000f12 <main+0x1aa>
			  break;
 8000e88:	bf00      	nop
		  }
	  }
	  while(answer[0] == 'v'){
 8000e8a:	e042      	b.n	8000f12 <main+0x1aa>
		  voltage[0] = (adcRawData[0] * 3.3)/4095;
 8000e8c:	4b3c      	ldr	r3, [pc, #240]	; (8000f80 <main+0x218>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fb4e 	bl	8000534 <__aeabi_i2d>
 8000e98:	a335      	add	r3, pc, #212	; (adr r3, 8000f70 <main+0x208>)
 8000e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9e:	f7ff fbb3 	bl	8000608 <__aeabi_dmul>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	a333      	add	r3, pc, #204	; (adr r3, 8000f78 <main+0x210>)
 8000eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb0:	f7ff fcd4 	bl	800085c <__aeabi_ddiv>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	4610      	mov	r0, r2
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f7ff fdb6 	bl	8000a2c <__aeabi_d2uiz>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	801a      	strh	r2, [r3, #0]
		  sprintf(adcVoltage, "[%d] Voltage Value = %d\n", X, voltage[0]);
 8000eca:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	f107 0010 	add.w	r0, r7, #16
 8000ed8:	492e      	ldr	r1, [pc, #184]	; (8000f94 <main+0x22c>)
 8000eda:	f003 fb69 	bl	80045b0 <siprintf>
		  HAL_UART_Transmit(&huart6, adcVoltage, sizeof(adcVoltage), 100);
 8000ede:	f107 0110 	add.w	r1, r7, #16
 8000ee2:	2364      	movs	r3, #100	; 0x64
 8000ee4:	2232      	movs	r2, #50	; 0x32
 8000ee6:	4828      	ldr	r0, [pc, #160]	; (8000f88 <main+0x220>)
 8000ee8:	f002 fb73 	bl	80035d2 <HAL_UART_Transmit>
		  X++;
 8000eec:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
		  HAL_Delay(500);
 8000ef6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000efa:	f000 fba3 	bl	8001644 <HAL_Delay>
		  HAL_UART_Receive(&huart6, answer, sizeof(answer), 250);
 8000efe:	4639      	mov	r1, r7
 8000f00:	23fa      	movs	r3, #250	; 0xfa
 8000f02:	220a      	movs	r2, #10
 8000f04:	4820      	ldr	r0, [pc, #128]	; (8000f88 <main+0x220>)
 8000f06:	f002 fbf6 	bl	80036f6 <HAL_UART_Receive>
		  if(answer[0] == 'q'){
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b71      	cmp	r3, #113	; 0x71
 8000f10:	d004      	beq.n	8000f1c <main+0x1b4>
	  while(answer[0] == 'v'){
 8000f12:	463b      	mov	r3, r7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b76      	cmp	r3, #118	; 0x76
 8000f18:	d0b8      	beq.n	8000e8c <main+0x124>
 8000f1a:	e000      	b.n	8000f1e <main+0x1b6>
			  break;
 8000f1c:	bf00      	nop
		  }
	  }
	  if(answer[0] != 'a' && answer[0] !='v' && answer[0] != '\0' && answer[0] != 'q'){
 8000f1e:	463b      	mov	r3, r7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b61      	cmp	r3, #97	; 0x61
 8000f24:	d01c      	beq.n	8000f60 <main+0x1f8>
 8000f26:	463b      	mov	r3, r7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b76      	cmp	r3, #118	; 0x76
 8000f2c:	d018      	beq.n	8000f60 <main+0x1f8>
 8000f2e:	463b      	mov	r3, r7
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d014      	beq.n	8000f60 <main+0x1f8>
 8000f36:	463b      	mov	r3, r7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b71      	cmp	r3, #113	; 0x71
 8000f3c:	d010      	beq.n	8000f60 <main+0x1f8>
		  sprintf(errorMsg, "Invalid input. Please try again.\n");
 8000f3e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f42:	4915      	ldr	r1, [pc, #84]	; (8000f98 <main+0x230>)
 8000f44:	4618      	mov	r0, r3
 8000f46:	f003 fb33 	bl	80045b0 <siprintf>
		  HAL_UART_Transmit(&huart6, errorMsg, sizeof(errorMsg),250);
 8000f4a:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8000f4e:	23fa      	movs	r3, #250	; 0xfa
 8000f50:	2232      	movs	r2, #50	; 0x32
 8000f52:	480d      	ldr	r0, [pc, #52]	; (8000f88 <main+0x220>)
 8000f54:	f002 fb3d 	bl	80035d2 <HAL_UART_Transmit>
		  answer[0] = '\0';
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
		  continue;
 8000f5e:	bf00      	nop
	  while(answer[0] == '\0'){
 8000f60:	463b      	mov	r3, r7
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f43f af4a 	beq.w	8000dfe <main+0x96>
	  X = 0;
 8000f6a:	e741      	b.n	8000df0 <main+0x88>
 8000f6c:	f3af 8000 	nop.w
 8000f70:	66666666 	.word	0x66666666
 8000f74:	400a6666 	.word	0x400a6666
 8000f78:	00000000 	.word	0x00000000
 8000f7c:	40affe00 	.word	0x40affe00
 8000f80:	20000098 	.word	0x20000098
 8000f84:	2000009c 	.word	0x2000009c
 8000f88:	20000144 	.word	0x20000144
 8000f8c:	08004e24 	.word	0x08004e24
 8000f90:	08004e68 	.word	0x08004e68
 8000f94:	08004e80 	.word	0x08004e80
 8000f98:	08004e9c 	.word	0x08004e9c

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b094      	sub	sp, #80	; 0x50
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	2230      	movs	r2, #48	; 0x30
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 faf8 	bl	80045a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	4b28      	ldr	r3, [pc, #160]	; (8001068 <SystemClock_Config+0xcc>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a27      	ldr	r2, [pc, #156]	; (8001068 <SystemClock_Config+0xcc>)
 8000fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd0:	4b25      	ldr	r3, [pc, #148]	; (8001068 <SystemClock_Config+0xcc>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <SystemClock_Config+0xd0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a21      	ldr	r2, [pc, #132]	; (800106c <SystemClock_Config+0xd0>)
 8000fe6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <SystemClock_Config+0xd0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ffc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001002:	2302      	movs	r3, #2
 8001004:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001006:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800100c:	2304      	movs	r3, #4
 800100e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001010:	23a8      	movs	r3, #168	; 0xa8
 8001012:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001014:	2302      	movs	r3, #2
 8001016:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001018:	2304      	movs	r3, #4
 800101a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f107 0320 	add.w	r3, r7, #32
 8001020:	4618      	mov	r0, r3
 8001022:	f001 fe15 	bl	8002c50 <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800102c:	f000 f8f2 	bl	8001214 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001034:	2302      	movs	r3, #2
 8001036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800103c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001040:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001046:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2105      	movs	r1, #5
 800104e:	4618      	mov	r0, r3
 8001050:	f002 f876 	bl	8003140 <HAL_RCC_ClockConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800105a:	f000 f8db 	bl	8001214 <Error_Handler>
  }
}
 800105e:	bf00      	nop
 8001060:	3750      	adds	r7, #80	; 0x50
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001076:	463b      	mov	r3, r7
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <MX_ADC1_Init+0x98>)
 8001084:	4a21      	ldr	r2, [pc, #132]	; (800110c <MX_ADC1_Init+0x9c>)
 8001086:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <MX_ADC1_Init+0x98>)
 800108a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800108e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <MX_ADC1_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_ADC1_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_ADC1_Init+0x98>)
 800109e:	2201      	movs	r2, #1
 80010a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <MX_ADC1_Init+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <MX_ADC1_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_ADC1_Init+0x98>)
 80010b2:	4a17      	ldr	r2, [pc, #92]	; (8001110 <MX_ADC1_Init+0xa0>)
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_ADC1_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_ADC1_Init+0x98>)
 80010be:	2201      	movs	r2, #1
 80010c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_ADC1_Init+0x98>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_ADC1_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <MX_ADC1_Init+0x98>)
 80010d2:	f000 fadb 	bl	800168c <HAL_ADC_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010dc:	f000 f89a 	bl	8001214 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010e0:	2303      	movs	r3, #3
 80010e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010e8:	2307      	movs	r3, #7
 80010ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ec:	463b      	mov	r3, r7
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_ADC1_Init+0x98>)
 80010f2:	f000 fc3d 	bl	8001970 <HAL_ADC_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010fc:	f000 f88a 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	2000009c 	.word	0x2000009c
 800110c:	40012000 	.word	0x40012000
 8001110:	0f000001 	.word	0x0f000001

08001114 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_USART6_UART_Init+0x4c>)
 800111a:	4a12      	ldr	r2, [pc, #72]	; (8001164 <MX_USART6_UART_Init+0x50>)
 800111c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <MX_USART6_UART_Init+0x4c>)
 8001120:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001124:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_USART6_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_USART6_UART_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <MX_USART6_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_USART6_UART_Init+0x4c>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <MX_USART6_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_USART6_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_USART6_UART_Init+0x4c>)
 800114c:	f002 f9f4 	bl	8003538 <HAL_UART_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001156:	f000 f85d 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000144 	.word	0x20000144
 8001164:	40011400 	.word	0x40011400

08001168 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_DMA_Init+0x3c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <MX_DMA_Init+0x3c>)
 8001178:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_DMA_Init+0x3c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2102      	movs	r1, #2
 800118e:	2038      	movs	r0, #56	; 0x38
 8001190:	f000 ff79 	bl	8002086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001194:	2038      	movs	r0, #56	; 0x38
 8001196:	f000 ff92 	bl	80020be <HAL_NVIC_EnableIRQ>

}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800

080011a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_GPIO_Init+0x68>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a16      	ldr	r2, [pc, #88]	; (8001210 <MX_GPIO_Init+0x68>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_GPIO_Init+0x68>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MX_GPIO_Init+0x68>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a0f      	ldr	r2, [pc, #60]	; (8001210 <MX_GPIO_Init+0x68>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <MX_GPIO_Init+0x68>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_GPIO_Init+0x68>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <MX_GPIO_Init+0x68>)
 80011f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_GPIO_Init+0x68>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	e7fe      	b.n	800121c <Error_Handler+0x8>
	...

08001220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <HAL_MspInit+0x4c>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	4a0f      	ldr	r2, [pc, #60]	; (800126c <HAL_MspInit+0x4c>)
 8001230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001234:	6453      	str	r3, [r2, #68]	; 0x44
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <HAL_MspInit+0x4c>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_MspInit+0x4c>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a08      	ldr	r2, [pc, #32]	; (800126c <HAL_MspInit+0x4c>)
 800124c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_MspInit+0x4c>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800

08001270 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a2f      	ldr	r2, [pc, #188]	; (800134c <HAL_ADC_MspInit+0xdc>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d157      	bne.n	8001342 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <HAL_ADC_MspInit+0xe0>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	4a2d      	ldr	r2, [pc, #180]	; (8001350 <HAL_ADC_MspInit+0xe0>)
 800129c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <HAL_ADC_MspInit+0xe0>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b27      	ldr	r3, [pc, #156]	; (8001350 <HAL_ADC_MspInit+0xe0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a26      	ldr	r2, [pc, #152]	; (8001350 <HAL_ADC_MspInit+0xe0>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b24      	ldr	r3, [pc, #144]	; (8001350 <HAL_ADC_MspInit+0xe0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012ca:	2308      	movs	r3, #8
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ce:	2303      	movs	r3, #3
 80012d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	481d      	ldr	r0, [pc, #116]	; (8001354 <HAL_ADC_MspInit+0xe4>)
 80012de:	f001 fb0b 	bl	80028f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012e2:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <HAL_ADC_MspInit+0xe8>)
 80012e4:	4a1d      	ldr	r2, [pc, #116]	; (800135c <HAL_ADC_MspInit+0xec>)
 80012e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_ADC_MspInit+0xe8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <HAL_ADC_MspInit+0xe8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f4:	4b18      	ldr	r3, [pc, #96]	; (8001358 <HAL_ADC_MspInit+0xe8>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <HAL_ADC_MspInit+0xe8>)
 80012fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001300:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_ADC_MspInit+0xe8>)
 8001304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001308:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <HAL_ADC_MspInit+0xe8>)
 800130c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001310:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_ADC_MspInit+0xe8>)
 8001314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001318:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_ADC_MspInit+0xe8>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001320:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <HAL_ADC_MspInit+0xe8>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001326:	480c      	ldr	r0, [pc, #48]	; (8001358 <HAL_ADC_MspInit+0xe8>)
 8001328:	f000 fee4 	bl	80020f4 <HAL_DMA_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001332:	f7ff ff6f 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_ADC_MspInit+0xe8>)
 800133a:	639a      	str	r2, [r3, #56]	; 0x38
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <HAL_ADC_MspInit+0xe8>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3728      	adds	r7, #40	; 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40012000 	.word	0x40012000
 8001350:	40023800 	.word	0x40023800
 8001354:	40020000 	.word	0x40020000
 8001358:	200000e4 	.word	0x200000e4
 800135c:	40026410 	.word	0x40026410

08001360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <HAL_UART_MspInit+0x94>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d134      	bne.n	80013ec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <HAL_UART_MspInit+0x98>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <HAL_UART_MspInit+0x98>)
 800138c:	f043 0320 	orr.w	r3, r3, #32
 8001390:	6453      	str	r3, [r2, #68]	; 0x44
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <HAL_UART_MspInit+0x98>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f003 0320 	and.w	r3, r3, #32
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_UART_MspInit+0x98>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <HAL_UART_MspInit+0x98>)
 80013a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_UART_MspInit+0x98>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80013ba:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80013cc:	2308      	movs	r3, #8
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4809      	ldr	r0, [pc, #36]	; (80013fc <HAL_UART_MspInit+0x9c>)
 80013d8:	f001 fa8e 	bl	80028f8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 3, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2103      	movs	r1, #3
 80013e0:	2047      	movs	r0, #71	; 0x47
 80013e2:	f000 fe50 	bl	8002086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80013e6:	2047      	movs	r0, #71	; 0x47
 80013e8:	f000 fe69 	bl	80020be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40011400 	.word	0x40011400
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40021800 	.word	0x40021800

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144c:	f000 f8da 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}

08001454 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <DMA2_Stream0_IRQHandler+0x10>)
 800145a:	f000 ffe3 	bl	8002424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200000e4 	.word	0x200000e4

08001468 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <USART6_IRQHandler+0x10>)
 800146e:	f002 f9e5 	bl	800383c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000144 	.word	0x20000144

0800147c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001484:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <_sbrk+0x5c>)
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <_sbrk+0x60>)
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <_sbrk+0x64>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <_sbrk+0x64>)
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <_sbrk+0x68>)
 800149c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d207      	bcs.n	80014bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014ac:	f003 f84e 	bl	800454c <__errno>
 80014b0:	4603      	mov	r3, r0
 80014b2:	220c      	movs	r2, #12
 80014b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	e009      	b.n	80014d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <_sbrk+0x64>)
 80014cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ce:	68fb      	ldr	r3, [r7, #12]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20030000 	.word	0x20030000
 80014dc:	00000400 	.word	0x00000400
 80014e0:	2000008c 	.word	0x2000008c
 80014e4:	200001a0 	.word	0x200001a0

080014e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <SystemInit+0x20>)
 80014ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <SystemInit+0x20>)
 80014f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800150c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001544 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001510:	480d      	ldr	r0, [pc, #52]	; (8001548 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001512:	490e      	ldr	r1, [pc, #56]	; (800154c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001514:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001528:	4c0b      	ldr	r4, [pc, #44]	; (8001558 <LoopFillZerobss+0x26>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001536:	f7ff ffd7 	bl	80014e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153a:	f003 f80d 	bl	8004558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153e:	f7ff fc13 	bl	8000d68 <main>
  bx  lr    
 8001542:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001544:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001550:	08004f24 	.word	0x08004f24
  ldr r2, =_sbss
 8001554:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001558:	2000019c 	.word	0x2000019c

0800155c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC_IRQHandler>
	...

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <HAL_Init+0x40>)
 800156a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <HAL_Init+0x40>)
 8001576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800157a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_Init+0x40>)
 8001582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001586:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001588:	2003      	movs	r0, #3
 800158a:	f000 fd71 	bl	8002070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158e:	2000      	movs	r0, #0
 8001590:	f000 f808 	bl	80015a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001594:	f7ff fe44 	bl	8001220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023c00 	.word	0x40023c00

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_InitTick+0x54>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_InitTick+0x58>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fd89 	bl	80020da <HAL_SYSTICK_Config>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00e      	b.n	80015f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d80a      	bhi.n	80015ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f000 fd51 	bl	8002086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <HAL_InitTick+0x5c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000008 	.word	0x20000008
 8001600:	20000004 	.word	0x20000004

08001604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_IncTick+0x20>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_IncTick+0x24>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <HAL_IncTick+0x24>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000008 	.word	0x20000008
 8001628:	20000188 	.word	0x20000188

0800162c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return uwTick;
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <HAL_GetTick+0x14>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000188 	.word	0x20000188

08001644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff ffee 	bl	800162c <HAL_GetTick>
 8001650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165c:	d005      	beq.n	800166a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_Delay+0x44>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800166a:	bf00      	nop
 800166c:	f7ff ffde 	bl	800162c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	429a      	cmp	r2, r3
 800167a:	d8f7      	bhi.n	800166c <HAL_Delay+0x28>
  {
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000008 	.word	0x20000008

0800168c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e033      	b.n	800170a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fde0 	bl	8001270 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d118      	bne.n	80016fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016d2:	f023 0302 	bic.w	r3, r3, #2
 80016d6:	f043 0202 	orr.w	r2, r3, #2
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 fa78 	bl	8001bd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f023 0303 	bic.w	r3, r3, #3
 80016f2:	f043 0201 	orr.w	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	641a      	str	r2, [r3, #64]	; 0x40
 80016fa:	e001      	b.n	8001700 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800172a:	2b01      	cmp	r3, #1
 800172c:	d101      	bne.n	8001732 <HAL_ADC_Start_DMA+0x1e>
 800172e:	2302      	movs	r3, #2
 8001730:	e0e9      	b.n	8001906 <HAL_ADC_Start_DMA+0x1f2>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b01      	cmp	r3, #1
 8001746:	d018      	beq.n	800177a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0201 	orr.w	r2, r2, #1
 8001756:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001758:	4b6d      	ldr	r3, [pc, #436]	; (8001910 <HAL_ADC_Start_DMA+0x1fc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a6d      	ldr	r2, [pc, #436]	; (8001914 <HAL_ADC_Start_DMA+0x200>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	0c9a      	lsrs	r2, r3, #18
 8001764:	4613      	mov	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4413      	add	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800176c:	e002      	b.n	8001774 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	3b01      	subs	r3, #1
 8001772:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f9      	bne.n	800176e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001788:	d107      	bne.n	800179a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001798:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	f040 80a1 	bne.w	80018ec <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017b2:	f023 0301 	bic.w	r3, r3, #1
 80017b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d007      	beq.n	80017dc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017e8:	d106      	bne.n	80017f8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f023 0206 	bic.w	r2, r3, #6
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	645a      	str	r2, [r3, #68]	; 0x44
 80017f6:	e002      	b.n	80017fe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001806:	4b44      	ldr	r3, [pc, #272]	; (8001918 <HAL_ADC_Start_DMA+0x204>)
 8001808:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180e:	4a43      	ldr	r2, [pc, #268]	; (800191c <HAL_ADC_Start_DMA+0x208>)
 8001810:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001816:	4a42      	ldr	r2, [pc, #264]	; (8001920 <HAL_ADC_Start_DMA+0x20c>)
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181e:	4a41      	ldr	r2, [pc, #260]	; (8001924 <HAL_ADC_Start_DMA+0x210>)
 8001820:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800182a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800183a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800184a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	334c      	adds	r3, #76	; 0x4c
 8001856:	4619      	mov	r1, r3
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f000 fcf8 	bl	8002250 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 031f 	and.w	r3, r3, #31
 8001868:	2b00      	cmp	r3, #0
 800186a:	d12a      	bne.n	80018c2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a2d      	ldr	r2, [pc, #180]	; (8001928 <HAL_ADC_Start_DMA+0x214>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d015      	beq.n	80018a2 <HAL_ADC_Start_DMA+0x18e>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a2c      	ldr	r2, [pc, #176]	; (800192c <HAL_ADC_Start_DMA+0x218>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d105      	bne.n	800188c <HAL_ADC_Start_DMA+0x178>
 8001880:	4b25      	ldr	r3, [pc, #148]	; (8001918 <HAL_ADC_Start_DMA+0x204>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00a      	beq.n	80018a2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a27      	ldr	r2, [pc, #156]	; (8001930 <HAL_ADC_Start_DMA+0x21c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d136      	bne.n	8001904 <HAL_ADC_Start_DMA+0x1f0>
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_ADC_Start_DMA+0x204>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d130      	bne.n	8001904 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d129      	bne.n	8001904 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	e020      	b.n	8001904 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a18      	ldr	r2, [pc, #96]	; (8001928 <HAL_ADC_Start_DMA+0x214>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d11b      	bne.n	8001904 <HAL_ADC_Start_DMA+0x1f0>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d114      	bne.n	8001904 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	e00b      	b.n	8001904 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f043 0210 	orr.w	r2, r3, #16
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fc:	f043 0201 	orr.w	r2, r3, #1
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000000 	.word	0x20000000
 8001914:	431bde83 	.word	0x431bde83
 8001918:	40012300 	.word	0x40012300
 800191c:	08001dcd 	.word	0x08001dcd
 8001920:	08001e87 	.word	0x08001e87
 8001924:	08001ea3 	.word	0x08001ea3
 8001928:	40012000 	.word	0x40012000
 800192c:	40012100 	.word	0x40012100
 8001930:	40012200 	.word	0x40012200

08001934 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_ADC_ConfigChannel+0x1c>
 8001988:	2302      	movs	r3, #2
 800198a:	e113      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x244>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b09      	cmp	r3, #9
 800199a:	d925      	bls.n	80019e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68d9      	ldr	r1, [r3, #12]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	3b1e      	subs	r3, #30
 80019b2:	2207      	movs	r2, #7
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43da      	mvns	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	400a      	ands	r2, r1
 80019c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68d9      	ldr	r1, [r3, #12]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	4603      	mov	r3, r0
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4403      	add	r3, r0
 80019da:	3b1e      	subs	r3, #30
 80019dc:	409a      	lsls	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	e022      	b.n	8001a2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6919      	ldr	r1, [r3, #16]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	4613      	mov	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	2207      	movs	r2, #7
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	400a      	ands	r2, r1
 8001a0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6919      	ldr	r1, [r3, #16]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	4603      	mov	r3, r0
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4403      	add	r3, r0
 8001a24:	409a      	lsls	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b06      	cmp	r3, #6
 8001a34:	d824      	bhi.n	8001a80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	3b05      	subs	r3, #5
 8001a48:	221f      	movs	r2, #31
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	400a      	ands	r2, r1
 8001a56:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4618      	mov	r0, r3
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	3b05      	subs	r3, #5
 8001a72:	fa00 f203 	lsl.w	r2, r0, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a7e:	e04c      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b0c      	cmp	r3, #12
 8001a86:	d824      	bhi.n	8001ad2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	3b23      	subs	r3, #35	; 0x23
 8001a9a:	221f      	movs	r2, #31
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43da      	mvns	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3b23      	subs	r3, #35	; 0x23
 8001ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	631a      	str	r2, [r3, #48]	; 0x30
 8001ad0:	e023      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3b41      	subs	r3, #65	; 0x41
 8001ae4:	221f      	movs	r2, #31
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43da      	mvns	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	400a      	ands	r2, r1
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4618      	mov	r0, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b41      	subs	r3, #65	; 0x41
 8001b0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b1a:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <HAL_ADC_ConfigChannel+0x250>)
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a28      	ldr	r2, [pc, #160]	; (8001bc4 <HAL_ADC_ConfigChannel+0x254>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d10f      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1d8>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b12      	cmp	r3, #18
 8001b2e:	d10b      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <HAL_ADC_ConfigChannel+0x254>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d12b      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x23a>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <HAL_ADC_ConfigChannel+0x258>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d003      	beq.n	8001b64 <HAL_ADC_ConfigChannel+0x1f4>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b11      	cmp	r3, #17
 8001b62:	d122      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a11      	ldr	r2, [pc, #68]	; (8001bc8 <HAL_ADC_ConfigChannel+0x258>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d111      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_ADC_ConfigChannel+0x25c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a11      	ldr	r2, [pc, #68]	; (8001bd0 <HAL_ADC_ConfigChannel+0x260>)
 8001b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b90:	0c9a      	lsrs	r2, r3, #18
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b9c:	e002      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f9      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	40012300 	.word	0x40012300
 8001bc4:	40012000 	.word	0x40012000
 8001bc8:	10000012 	.word	0x10000012
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	431bde83 	.word	0x431bde83

08001bd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bdc:	4b79      	ldr	r3, [pc, #484]	; (8001dc4 <ADC_Init+0x1f0>)
 8001bde:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	021a      	lsls	r2, r3, #8
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6859      	ldr	r1, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6899      	ldr	r1, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c66:	4a58      	ldr	r2, [pc, #352]	; (8001dc8 <ADC_Init+0x1f4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d022      	beq.n	8001cb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6899      	ldr	r1, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6899      	ldr	r1, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	e00f      	b.n	8001cd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0202 	bic.w	r2, r2, #2
 8001ce0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6899      	ldr	r1, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	7e1b      	ldrb	r3, [r3, #24]
 8001cec:	005a      	lsls	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01b      	beq.n	8001d38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6859      	ldr	r1, [r3, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	035a      	lsls	r2, r3, #13
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	e007      	b.n	8001d48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	051a      	lsls	r2, r3, #20
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6899      	ldr	r1, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d8a:	025a      	lsls	r2, r3, #9
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001da2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6899      	ldr	r1, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	029a      	lsls	r2, r3, #10
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	609a      	str	r2, [r3, #8]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	40012300 	.word	0x40012300
 8001dc8:	0f000001 	.word	0x0f000001

08001dcc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d13c      	bne.n	8001e60 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d12b      	bne.n	8001e58 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d127      	bne.n	8001e58 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d006      	beq.n	8001e24 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d119      	bne.n	8001e58 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0220 	bic.w	r2, r2, #32
 8001e32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d105      	bne.n	8001e58 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f043 0201 	orr.w	r2, r3, #1
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7ff fd6b 	bl	8001934 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e5e:	e00e      	b.n	8001e7e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f7ff fd75 	bl	800195c <HAL_ADC_ErrorCallback>
}
 8001e72:	e004      	b.n	8001e7e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	4798      	blx	r3
}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e92:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f7ff fd57 	bl	8001948 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2240      	movs	r2, #64	; 0x40
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f043 0204 	orr.w	r2, r3, #4
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f7ff fd4a 	bl	800195c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0b      	blt.n	8001f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4907      	ldr	r1, [pc, #28]	; (8001f6c <__NVIC_EnableIRQ+0x38>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	db0a      	blt.n	8001f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	490c      	ldr	r1, [pc, #48]	; (8001fbc <__NVIC_SetPriority+0x4c>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	0112      	lsls	r2, r2, #4
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	440b      	add	r3, r1
 8001f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f98:	e00a      	b.n	8001fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4908      	ldr	r1, [pc, #32]	; (8001fc0 <__NVIC_SetPriority+0x50>)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	3b04      	subs	r3, #4
 8001fa8:	0112      	lsls	r2, r2, #4
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	440b      	add	r3, r1
 8001fae:	761a      	strb	r2, [r3, #24]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000e100 	.word	0xe000e100
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f1c3 0307 	rsb	r3, r3, #7
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	bf28      	it	cs
 8001fe2:	2304      	movcs	r3, #4
 8001fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d902      	bls.n	8001ff4 <NVIC_EncodePriority+0x30>
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3b03      	subs	r3, #3
 8001ff2:	e000      	b.n	8001ff6 <NVIC_EncodePriority+0x32>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	401a      	ands	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800200c:	f04f 31ff 	mov.w	r1, #4294967295
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	43d9      	mvns	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	4313      	orrs	r3, r2
         );
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	; 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800203c:	d301      	bcc.n	8002042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800203e:	2301      	movs	r3, #1
 8002040:	e00f      	b.n	8002062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <SysTick_Config+0x40>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3b01      	subs	r3, #1
 8002048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800204a:	210f      	movs	r1, #15
 800204c:	f04f 30ff 	mov.w	r0, #4294967295
 8002050:	f7ff ff8e 	bl	8001f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <SysTick_Config+0x40>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205a:	4b04      	ldr	r3, [pc, #16]	; (800206c <SysTick_Config+0x40>)
 800205c:	2207      	movs	r2, #7
 800205e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	e000e010 	.word	0xe000e010

08002070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ff29 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002086:	b580      	push	{r7, lr}
 8002088:	b086      	sub	sp, #24
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002098:	f7ff ff3e 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 800209c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	6978      	ldr	r0, [r7, #20]
 80020a4:	f7ff ff8e 	bl	8001fc4 <NVIC_EncodePriority>
 80020a8:	4602      	mov	r2, r0
 80020aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff5d 	bl	8001f70 <__NVIC_SetPriority>
}
 80020b6:	bf00      	nop
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff31 	bl	8001f34 <__NVIC_EnableIRQ>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ffa2 	bl	800202c <SysTick_Config>
 80020e8:	4603      	mov	r3, r0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002100:	f7ff fa94 	bl	800162c <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e099      	b.n	8002244 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002130:	e00f      	b.n	8002152 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002132:	f7ff fa7b 	bl	800162c <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b05      	cmp	r3, #5
 800213e:	d908      	bls.n	8002152 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2220      	movs	r2, #32
 8002144:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2203      	movs	r2, #3
 800214a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e078      	b.n	8002244 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1e8      	bne.n	8002132 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	4b38      	ldr	r3, [pc, #224]	; (800224c <HAL_DMA_Init+0x158>)
 800216c:	4013      	ands	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800217e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800218a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002196:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d107      	bne.n	80021bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	4313      	orrs	r3, r2
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f023 0307 	bic.w	r3, r3, #7
 80021d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	4313      	orrs	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d117      	bne.n	8002216 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00e      	beq.n	8002216 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 fb01 	bl	8002800 <DMA_CheckFifoParam>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2240      	movs	r2, #64	; 0x40
 8002208:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002212:	2301      	movs	r3, #1
 8002214:	e016      	b.n	8002244 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fab8 	bl	8002794 <DMA_CalcBaseAndBitshift>
 8002224:	4603      	mov	r3, r0
 8002226:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222c:	223f      	movs	r2, #63	; 0x3f
 800222e:	409a      	lsls	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	f010803f 	.word	0xf010803f

08002250 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002266:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_DMA_Start_IT+0x26>
 8002272:	2302      	movs	r3, #2
 8002274:	e040      	b.n	80022f8 <HAL_DMA_Start_IT+0xa8>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b01      	cmp	r3, #1
 8002288:	d12f      	bne.n	80022ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2202      	movs	r2, #2
 800228e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 fa4a 	bl	8002738 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	223f      	movs	r2, #63	; 0x3f
 80022aa:	409a      	lsls	r2, r3
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0216 	orr.w	r2, r2, #22
 80022be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0208 	orr.w	r2, r2, #8
 80022d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	e005      	b.n	80022f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
 80022f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800230e:	f7ff f98d 	bl	800162c <HAL_GetTick>
 8002312:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d008      	beq.n	8002332 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2280      	movs	r2, #128	; 0x80
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e052      	b.n	80023d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0216 	bic.w	r2, r2, #22
 8002340:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002350:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	d103      	bne.n	8002362 <HAL_DMA_Abort+0x62>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0208 	bic.w	r2, r2, #8
 8002370:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0201 	bic.w	r2, r2, #1
 8002380:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002382:	e013      	b.n	80023ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002384:	f7ff f952 	bl	800162c <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b05      	cmp	r3, #5
 8002390:	d90c      	bls.n	80023ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2220      	movs	r2, #32
 8002396:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2203      	movs	r2, #3
 800239c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e015      	b.n	80023d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1e4      	bne.n	8002384 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023be:	223f      	movs	r2, #63	; 0x3f
 80023c0:	409a      	lsls	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d004      	beq.n	80023fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00c      	b.n	8002418 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2205      	movs	r2, #5
 8002402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0201 	bic.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002430:	4b92      	ldr	r3, [pc, #584]	; (800267c <HAL_DMA_IRQHandler+0x258>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a92      	ldr	r2, [pc, #584]	; (8002680 <HAL_DMA_IRQHandler+0x25c>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	0a9b      	lsrs	r3, r3, #10
 800243c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244e:	2208      	movs	r2, #8
 8002450:	409a      	lsls	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4013      	ands	r3, r2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d01a      	beq.n	8002490 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0204 	bic.w	r2, r2, #4
 8002476:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	2208      	movs	r2, #8
 800247e:	409a      	lsls	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002488:	f043 0201 	orr.w	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002494:	2201      	movs	r2, #1
 8002496:	409a      	lsls	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d012      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b2:	2201      	movs	r2, #1
 80024b4:	409a      	lsls	r2, r3
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	f043 0202 	orr.w	r2, r3, #2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ca:	2204      	movs	r2, #4
 80024cc:	409a      	lsls	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d012      	beq.n	80024fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00b      	beq.n	80024fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	2204      	movs	r2, #4
 80024ea:	409a      	lsls	r2, r3
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f4:	f043 0204 	orr.w	r2, r3, #4
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	2210      	movs	r2, #16
 8002502:	409a      	lsls	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d043      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d03c      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	2210      	movs	r2, #16
 8002520:	409a      	lsls	r2, r3
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d018      	beq.n	8002566 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d108      	bne.n	8002554 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	d024      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4798      	blx	r3
 8002552:	e01f      	b.n	8002594 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002558:	2b00      	cmp	r3, #0
 800255a:	d01b      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	4798      	blx	r3
 8002564:	e016      	b.n	8002594 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d107      	bne.n	8002584 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0208 	bic.w	r2, r2, #8
 8002582:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002598:	2220      	movs	r2, #32
 800259a:	409a      	lsls	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 808e 	beq.w	80026c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 8086 	beq.w	80026c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ba:	2220      	movs	r2, #32
 80025bc:	409a      	lsls	r2, r3
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d136      	bne.n	800263c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0216 	bic.w	r2, r2, #22
 80025dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <HAL_DMA_IRQHandler+0x1da>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0208 	bic.w	r2, r2, #8
 800260c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002612:	223f      	movs	r2, #63	; 0x3f
 8002614:	409a      	lsls	r2, r3
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800262e:	2b00      	cmp	r3, #0
 8002630:	d07d      	beq.n	800272e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	4798      	blx	r3
        }
        return;
 800263a:	e078      	b.n	800272e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d01c      	beq.n	8002684 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d108      	bne.n	800266a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	2b00      	cmp	r3, #0
 800265e:	d030      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	4798      	blx	r3
 8002668:	e02b      	b.n	80026c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266e:	2b00      	cmp	r3, #0
 8002670:	d027      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	4798      	blx	r3
 800267a:	e022      	b.n	80026c2 <HAL_DMA_IRQHandler+0x29e>
 800267c:	20000000 	.word	0x20000000
 8002680:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10f      	bne.n	80026b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0210 	bic.w	r2, r2, #16
 80026a0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d032      	beq.n	8002730 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d022      	beq.n	800271c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2205      	movs	r2, #5
 80026da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0201 	bic.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	3301      	adds	r3, #1
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d307      	bcc.n	800270a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f2      	bne.n	80026ee <HAL_DMA_IRQHandler+0x2ca>
 8002708:	e000      	b.n	800270c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800270a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
 800272c:	e000      	b.n	8002730 <HAL_DMA_IRQHandler+0x30c>
        return;
 800272e:	bf00      	nop
    }
  }
}
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop

08002738 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002754:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b40      	cmp	r3, #64	; 0x40
 8002764:	d108      	bne.n	8002778 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002776:	e007      	b.n	8002788 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	60da      	str	r2, [r3, #12]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	3b10      	subs	r3, #16
 80027a4:	4a14      	ldr	r2, [pc, #80]	; (80027f8 <DMA_CalcBaseAndBitshift+0x64>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027ae:	4a13      	ldr	r2, [pc, #76]	; (80027fc <DMA_CalcBaseAndBitshift+0x68>)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4413      	add	r3, r2
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d909      	bls.n	80027d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027ca:	f023 0303 	bic.w	r3, r3, #3
 80027ce:	1d1a      	adds	r2, r3, #4
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	659a      	str	r2, [r3, #88]	; 0x58
 80027d4:	e007      	b.n	80027e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027de:	f023 0303 	bic.w	r3, r3, #3
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	aaaaaaab 	.word	0xaaaaaaab
 80027fc:	08004ed8 	.word	0x08004ed8

08002800 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d11f      	bne.n	800285a <DMA_CheckFifoParam+0x5a>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b03      	cmp	r3, #3
 800281e:	d856      	bhi.n	80028ce <DMA_CheckFifoParam+0xce>
 8002820:	a201      	add	r2, pc, #4	; (adr r2, 8002828 <DMA_CheckFifoParam+0x28>)
 8002822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002826:	bf00      	nop
 8002828:	08002839 	.word	0x08002839
 800282c:	0800284b 	.word	0x0800284b
 8002830:	08002839 	.word	0x08002839
 8002834:	080028cf 	.word	0x080028cf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d046      	beq.n	80028d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002848:	e043      	b.n	80028d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002852:	d140      	bne.n	80028d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002858:	e03d      	b.n	80028d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002862:	d121      	bne.n	80028a8 <DMA_CheckFifoParam+0xa8>
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d837      	bhi.n	80028da <DMA_CheckFifoParam+0xda>
 800286a:	a201      	add	r2, pc, #4	; (adr r2, 8002870 <DMA_CheckFifoParam+0x70>)
 800286c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002870:	08002881 	.word	0x08002881
 8002874:	08002887 	.word	0x08002887
 8002878:	08002881 	.word	0x08002881
 800287c:	08002899 	.word	0x08002899
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
      break;
 8002884:	e030      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d025      	beq.n	80028de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002896:	e022      	b.n	80028de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028a0:	d11f      	bne.n	80028e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028a6:	e01c      	b.n	80028e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d903      	bls.n	80028b6 <DMA_CheckFifoParam+0xb6>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d003      	beq.n	80028bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028b4:	e018      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
      break;
 80028ba:	e015      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00e      	beq.n	80028e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
      break;
 80028cc:	e00b      	b.n	80028e6 <DMA_CheckFifoParam+0xe6>
      break;
 80028ce:	bf00      	nop
 80028d0:	e00a      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028d2:	bf00      	nop
 80028d4:	e008      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028d6:	bf00      	nop
 80028d8:	e006      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028da:	bf00      	nop
 80028dc:	e004      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028de:	bf00      	nop
 80028e0:	e002      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80028e2:	bf00      	nop
 80028e4:	e000      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028e6:	bf00      	nop
    }
  } 
  
  return status; 
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop

080028f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e177      	b.n	8002c04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002914:	2201      	movs	r2, #1
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	429a      	cmp	r2, r3
 800292e:	f040 8166 	bne.w	8002bfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d005      	beq.n	800294a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002946:	2b02      	cmp	r3, #2
 8002948:	d130      	bne.n	80029ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	2203      	movs	r2, #3
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4013      	ands	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002980:	2201      	movs	r2, #1
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 0201 	and.w	r2, r3, #1
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d017      	beq.n	80029e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d123      	bne.n	8002a3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	08da      	lsrs	r2, r3, #3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3208      	adds	r2, #8
 80029fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	08da      	lsrs	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3208      	adds	r2, #8
 8002a36:	69b9      	ldr	r1, [r7, #24]
 8002a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0203 	and.w	r2, r3, #3
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80c0 	beq.w	8002bfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	4b66      	ldr	r3, [pc, #408]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	4a65      	ldr	r2, [pc, #404]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8e:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a9a:	4a61      	ldr	r2, [pc, #388]	; (8002c20 <HAL_GPIO_Init+0x328>)
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	089b      	lsrs	r3, r3, #2
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	220f      	movs	r2, #15
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a58      	ldr	r2, [pc, #352]	; (8002c24 <HAL_GPIO_Init+0x32c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d037      	beq.n	8002b36 <HAL_GPIO_Init+0x23e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a57      	ldr	r2, [pc, #348]	; (8002c28 <HAL_GPIO_Init+0x330>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d031      	beq.n	8002b32 <HAL_GPIO_Init+0x23a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a56      	ldr	r2, [pc, #344]	; (8002c2c <HAL_GPIO_Init+0x334>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d02b      	beq.n	8002b2e <HAL_GPIO_Init+0x236>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a55      	ldr	r2, [pc, #340]	; (8002c30 <HAL_GPIO_Init+0x338>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d025      	beq.n	8002b2a <HAL_GPIO_Init+0x232>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a54      	ldr	r2, [pc, #336]	; (8002c34 <HAL_GPIO_Init+0x33c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d01f      	beq.n	8002b26 <HAL_GPIO_Init+0x22e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a53      	ldr	r2, [pc, #332]	; (8002c38 <HAL_GPIO_Init+0x340>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d019      	beq.n	8002b22 <HAL_GPIO_Init+0x22a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a52      	ldr	r2, [pc, #328]	; (8002c3c <HAL_GPIO_Init+0x344>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <HAL_GPIO_Init+0x226>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a51      	ldr	r2, [pc, #324]	; (8002c40 <HAL_GPIO_Init+0x348>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00d      	beq.n	8002b1a <HAL_GPIO_Init+0x222>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a50      	ldr	r2, [pc, #320]	; (8002c44 <HAL_GPIO_Init+0x34c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d007      	beq.n	8002b16 <HAL_GPIO_Init+0x21e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a4f      	ldr	r2, [pc, #316]	; (8002c48 <HAL_GPIO_Init+0x350>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_GPIO_Init+0x21a>
 8002b0e:	2309      	movs	r3, #9
 8002b10:	e012      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b12:	230a      	movs	r3, #10
 8002b14:	e010      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b16:	2308      	movs	r3, #8
 8002b18:	e00e      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b1a:	2307      	movs	r3, #7
 8002b1c:	e00c      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b1e:	2306      	movs	r3, #6
 8002b20:	e00a      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b22:	2305      	movs	r3, #5
 8002b24:	e008      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b26:	2304      	movs	r3, #4
 8002b28:	e006      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e004      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e002      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b36:	2300      	movs	r3, #0
 8002b38:	69fa      	ldr	r2, [r7, #28]
 8002b3a:	f002 0203 	and.w	r2, r2, #3
 8002b3e:	0092      	lsls	r2, r2, #2
 8002b40:	4093      	lsls	r3, r2
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b48:	4935      	ldr	r1, [pc, #212]	; (8002c20 <HAL_GPIO_Init+0x328>)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	3302      	adds	r3, #2
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b56:	4b3d      	ldr	r3, [pc, #244]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b7a:	4a34      	ldr	r2, [pc, #208]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b80:	4b32      	ldr	r3, [pc, #200]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ba4:	4a29      	ldr	r2, [pc, #164]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002baa:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bce:	4a1f      	ldr	r2, [pc, #124]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bd4:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bf8:	4a14      	ldr	r2, [pc, #80]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3301      	adds	r3, #1
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	2b0f      	cmp	r3, #15
 8002c08:	f67f ae84 	bls.w	8002914 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40013800 	.word	0x40013800
 8002c24:	40020000 	.word	0x40020000
 8002c28:	40020400 	.word	0x40020400
 8002c2c:	40020800 	.word	0x40020800
 8002c30:	40020c00 	.word	0x40020c00
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40021400 	.word	0x40021400
 8002c3c:	40021800 	.word	0x40021800
 8002c40:	40021c00 	.word	0x40021c00
 8002c44:	40022000 	.word	0x40022000
 8002c48:	40022400 	.word	0x40022400
 8002c4c:	40013c00 	.word	0x40013c00

08002c50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e264      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d075      	beq.n	8002d5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c6e:	4ba3      	ldr	r3, [pc, #652]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d00c      	beq.n	8002c94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c7a:	4ba0      	ldr	r3, [pc, #640]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d112      	bne.n	8002cac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c86:	4b9d      	ldr	r3, [pc, #628]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c92:	d10b      	bne.n	8002cac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c94:	4b99      	ldr	r3, [pc, #612]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d05b      	beq.n	8002d58 <HAL_RCC_OscConfig+0x108>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d157      	bne.n	8002d58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e23f      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb4:	d106      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x74>
 8002cb6:	4b91      	ldr	r3, [pc, #580]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a90      	ldr	r2, [pc, #576]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e01d      	b.n	8002d00 <HAL_RCC_OscConfig+0xb0>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x98>
 8002cce:	4b8b      	ldr	r3, [pc, #556]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a8a      	ldr	r2, [pc, #552]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	4b88      	ldr	r3, [pc, #544]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a87      	ldr	r2, [pc, #540]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	e00b      	b.n	8002d00 <HAL_RCC_OscConfig+0xb0>
 8002ce8:	4b84      	ldr	r3, [pc, #528]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a83      	ldr	r2, [pc, #524]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	4b81      	ldr	r3, [pc, #516]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a80      	ldr	r2, [pc, #512]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d013      	beq.n	8002d30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d08:	f7fe fc90 	bl	800162c <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d10:	f7fe fc8c 	bl	800162c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	; 0x64
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e204      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	4b76      	ldr	r3, [pc, #472]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0xc0>
 8002d2e:	e014      	b.n	8002d5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fe fc7c 	bl	800162c <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d38:	f7fe fc78 	bl	800162c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	; 0x64
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e1f0      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4a:	4b6c      	ldr	r3, [pc, #432]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0xe8>
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d063      	beq.n	8002e2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d66:	4b65      	ldr	r3, [pc, #404]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00b      	beq.n	8002d8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d72:	4b62      	ldr	r3, [pc, #392]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d11c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d7e:	4b5f      	ldr	r3, [pc, #380]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d116      	bne.n	8002db8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8a:	4b5c      	ldr	r3, [pc, #368]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <HAL_RCC_OscConfig+0x152>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d001      	beq.n	8002da2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e1c4      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da2:	4b56      	ldr	r3, [pc, #344]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4952      	ldr	r1, [pc, #328]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db6:	e03a      	b.n	8002e2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d020      	beq.n	8002e02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc0:	4b4f      	ldr	r3, [pc, #316]	; (8002f00 <HAL_RCC_OscConfig+0x2b0>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc6:	f7fe fc31 	bl	800162c <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dce:	f7fe fc2d 	bl	800162c <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e1a5      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de0:	4b46      	ldr	r3, [pc, #280]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dec:	4b43      	ldr	r3, [pc, #268]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	4940      	ldr	r1, [pc, #256]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	600b      	str	r3, [r1, #0]
 8002e00:	e015      	b.n	8002e2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e02:	4b3f      	ldr	r3, [pc, #252]	; (8002f00 <HAL_RCC_OscConfig+0x2b0>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe fc10 	bl	800162c <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e10:	f7fe fc0c 	bl	800162c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e184      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e22:	4b36      	ldr	r3, [pc, #216]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d030      	beq.n	8002e9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d016      	beq.n	8002e70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e42:	4b30      	ldr	r3, [pc, #192]	; (8002f04 <HAL_RCC_OscConfig+0x2b4>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e48:	f7fe fbf0 	bl	800162c <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e50:	f7fe fbec 	bl	800162c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e164      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e62:	4b26      	ldr	r3, [pc, #152]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x200>
 8002e6e:	e015      	b.n	8002e9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e70:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <HAL_RCC_OscConfig+0x2b4>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e76:	f7fe fbd9 	bl	800162c <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e7e:	f7fe fbd5 	bl	800162c <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e14d      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e90:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f0      	bne.n	8002e7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80a0 	beq.w	8002fea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eae:	4b13      	ldr	r3, [pc, #76]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10f      	bne.n	8002eda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a0e      	ldr	r2, [pc, #56]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eca:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eda:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_RCC_OscConfig+0x2b8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d121      	bne.n	8002f2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee6:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <HAL_RCC_OscConfig+0x2b8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a07      	ldr	r2, [pc, #28]	; (8002f08 <HAL_RCC_OscConfig+0x2b8>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fb9b 	bl	800162c <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef8:	e011      	b.n	8002f1e <HAL_RCC_OscConfig+0x2ce>
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
 8002f00:	42470000 	.word	0x42470000
 8002f04:	42470e80 	.word	0x42470e80
 8002f08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0c:	f7fe fb8e 	bl	800162c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e106      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1e:	4b85      	ldr	r3, [pc, #532]	; (8003134 <HAL_RCC_OscConfig+0x4e4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d106      	bne.n	8002f40 <HAL_RCC_OscConfig+0x2f0>
 8002f32:	4b81      	ldr	r3, [pc, #516]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	4a80      	ldr	r2, [pc, #512]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3e:	e01c      	b.n	8002f7a <HAL_RCC_OscConfig+0x32a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b05      	cmp	r3, #5
 8002f46:	d10c      	bne.n	8002f62 <HAL_RCC_OscConfig+0x312>
 8002f48:	4b7b      	ldr	r3, [pc, #492]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	4a7a      	ldr	r2, [pc, #488]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f4e:	f043 0304 	orr.w	r3, r3, #4
 8002f52:	6713      	str	r3, [r2, #112]	; 0x70
 8002f54:	4b78      	ldr	r3, [pc, #480]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f58:	4a77      	ldr	r2, [pc, #476]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f60:	e00b      	b.n	8002f7a <HAL_RCC_OscConfig+0x32a>
 8002f62:	4b75      	ldr	r3, [pc, #468]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	4a74      	ldr	r2, [pc, #464]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6e:	4b72      	ldr	r3, [pc, #456]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	4a71      	ldr	r2, [pc, #452]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f74:	f023 0304 	bic.w	r3, r3, #4
 8002f78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d015      	beq.n	8002fae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f82:	f7fe fb53 	bl	800162c <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f88:	e00a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fe fb4f 	bl	800162c <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e0c5      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa0:	4b65      	ldr	r3, [pc, #404]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0ee      	beq.n	8002f8a <HAL_RCC_OscConfig+0x33a>
 8002fac:	e014      	b.n	8002fd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fae:	f7fe fb3d 	bl	800162c <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb4:	e00a      	b.n	8002fcc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb6:	f7fe fb39 	bl	800162c <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e0af      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fcc:	4b5a      	ldr	r3, [pc, #360]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1ee      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d105      	bne.n	8002fea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fde:	4b56      	ldr	r3, [pc, #344]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	4a55      	ldr	r2, [pc, #340]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 809b 	beq.w	800312a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ff4:	4b50      	ldr	r3, [pc, #320]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d05c      	beq.n	80030ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d141      	bne.n	800308c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003008:	4b4c      	ldr	r3, [pc, #304]	; (800313c <HAL_RCC_OscConfig+0x4ec>)
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7fe fb0d 	bl	800162c <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003016:	f7fe fb09 	bl	800162c <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e081      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003028:	4b43      	ldr	r3, [pc, #268]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f0      	bne.n	8003016 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	019b      	lsls	r3, r3, #6
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	085b      	lsrs	r3, r3, #1
 800304c:	3b01      	subs	r3, #1
 800304e:	041b      	lsls	r3, r3, #16
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	061b      	lsls	r3, r3, #24
 8003058:	4937      	ldr	r1, [pc, #220]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800305e:	4b37      	ldr	r3, [pc, #220]	; (800313c <HAL_RCC_OscConfig+0x4ec>)
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7fe fae2 	bl	800162c <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306c:	f7fe fade 	bl	800162c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e056      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307e:	4b2e      	ldr	r3, [pc, #184]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x41c>
 800308a:	e04e      	b.n	800312a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308c:	4b2b      	ldr	r3, [pc, #172]	; (800313c <HAL_RCC_OscConfig+0x4ec>)
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003092:	f7fe facb 	bl	800162c <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309a:	f7fe fac7 	bl	800162c <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e03f      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ac:	4b22      	ldr	r3, [pc, #136]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1f0      	bne.n	800309a <HAL_RCC_OscConfig+0x44a>
 80030b8:	e037      	b.n	800312a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e032      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030c6:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d028      	beq.n	8003126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030de:	429a      	cmp	r2, r3
 80030e0:	d121      	bne.n	8003126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d11a      	bne.n	8003126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030f6:	4013      	ands	r3, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030fe:	4293      	cmp	r3, r2
 8003100:	d111      	bne.n	8003126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	085b      	lsrs	r3, r3, #1
 800310e:	3b01      	subs	r3, #1
 8003110:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003112:	429a      	cmp	r2, r3
 8003114:	d107      	bne.n	8003126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d001      	beq.n	800312a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40007000 	.word	0x40007000
 8003138:	40023800 	.word	0x40023800
 800313c:	42470060 	.word	0x42470060

08003140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0cc      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003154:	4b68      	ldr	r3, [pc, #416]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d90c      	bls.n	800317c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b65      	ldr	r3, [pc, #404]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b63      	ldr	r3, [pc, #396]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0b8      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003194:	4b59      	ldr	r3, [pc, #356]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4a58      	ldr	r2, [pc, #352]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800319e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031ac:	4b53      	ldr	r3, [pc, #332]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a52      	ldr	r2, [pc, #328]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b8:	4b50      	ldr	r3, [pc, #320]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	494d      	ldr	r1, [pc, #308]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d044      	beq.n	8003260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d107      	bne.n	80031ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	4b47      	ldr	r3, [pc, #284]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d119      	bne.n	800321e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e07f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d003      	beq.n	80031fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d107      	bne.n	800320e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fe:	4b3f      	ldr	r3, [pc, #252]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e06f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320e:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e067      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800321e:	4b37      	ldr	r3, [pc, #220]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f023 0203 	bic.w	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4934      	ldr	r1, [pc, #208]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	4313      	orrs	r3, r2
 800322e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003230:	f7fe f9fc 	bl	800162c <HAL_GetTick>
 8003234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003236:	e00a      	b.n	800324e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003238:	f7fe f9f8 	bl	800162c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e04f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324e:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 020c 	and.w	r2, r3, #12
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	429a      	cmp	r2, r3
 800325e:	d1eb      	bne.n	8003238 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003260:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d20c      	bcs.n	8003288 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b22      	ldr	r3, [pc, #136]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e032      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003294:	4b19      	ldr	r3, [pc, #100]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4916      	ldr	r1, [pc, #88]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032b2:	4b12      	ldr	r3, [pc, #72]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	490e      	ldr	r1, [pc, #56]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032c6:	f000 f821 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80032ca:	4602      	mov	r2, r0
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	091b      	lsrs	r3, r3, #4
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	490a      	ldr	r1, [pc, #40]	; (8003300 <HAL_RCC_ClockConfig+0x1c0>)
 80032d8:	5ccb      	ldrb	r3, [r1, r3]
 80032da:	fa22 f303 	lsr.w	r3, r2, r3
 80032de:	4a09      	ldr	r2, [pc, #36]	; (8003304 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <HAL_RCC_ClockConfig+0x1c8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe f95c 	bl	80015a4 <HAL_InitTick>

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023c00 	.word	0x40023c00
 80032fc:	40023800 	.word	0x40023800
 8003300:	08004ec0 	.word	0x08004ec0
 8003304:	20000000 	.word	0x20000000
 8003308:	20000004 	.word	0x20000004

0800330c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800330c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	2300      	movs	r3, #0
 800331e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003324:	4b67      	ldr	r3, [pc, #412]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 030c 	and.w	r3, r3, #12
 800332c:	2b08      	cmp	r3, #8
 800332e:	d00d      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x40>
 8003330:	2b08      	cmp	r3, #8
 8003332:	f200 80bd 	bhi.w	80034b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0x34>
 800333a:	2b04      	cmp	r3, #4
 800333c:	d003      	beq.n	8003346 <HAL_RCC_GetSysClockFreq+0x3a>
 800333e:	e0b7      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003340:	4b61      	ldr	r3, [pc, #388]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003342:	60bb      	str	r3, [r7, #8]
       break;
 8003344:	e0b7      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003346:	4b61      	ldr	r3, [pc, #388]	; (80034cc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003348:	60bb      	str	r3, [r7, #8]
      break;
 800334a:	e0b4      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800334c:	4b5d      	ldr	r3, [pc, #372]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003354:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003356:	4b5b      	ldr	r3, [pc, #364]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d04d      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003362:	4b58      	ldr	r3, [pc, #352]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	099b      	lsrs	r3, r3, #6
 8003368:	461a      	mov	r2, r3
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003372:	f04f 0100 	mov.w	r1, #0
 8003376:	ea02 0800 	and.w	r8, r2, r0
 800337a:	ea03 0901 	and.w	r9, r3, r1
 800337e:	4640      	mov	r0, r8
 8003380:	4649      	mov	r1, r9
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	014b      	lsls	r3, r1, #5
 800338c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003390:	0142      	lsls	r2, r0, #5
 8003392:	4610      	mov	r0, r2
 8003394:	4619      	mov	r1, r3
 8003396:	ebb0 0008 	subs.w	r0, r0, r8
 800339a:	eb61 0109 	sbc.w	r1, r1, r9
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	018b      	lsls	r3, r1, #6
 80033a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033ac:	0182      	lsls	r2, r0, #6
 80033ae:	1a12      	subs	r2, r2, r0
 80033b0:	eb63 0301 	sbc.w	r3, r3, r1
 80033b4:	f04f 0000 	mov.w	r0, #0
 80033b8:	f04f 0100 	mov.w	r1, #0
 80033bc:	00d9      	lsls	r1, r3, #3
 80033be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033c2:	00d0      	lsls	r0, r2, #3
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	eb12 0208 	adds.w	r2, r2, r8
 80033cc:	eb43 0309 	adc.w	r3, r3, r9
 80033d0:	f04f 0000 	mov.w	r0, #0
 80033d4:	f04f 0100 	mov.w	r1, #0
 80033d8:	0259      	lsls	r1, r3, #9
 80033da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033de:	0250      	lsls	r0, r2, #9
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	f7fd fb3c 	bl	8000a6c <__aeabi_uldivmod>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4613      	mov	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	e04a      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fe:	4b31      	ldr	r3, [pc, #196]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	099b      	lsrs	r3, r3, #6
 8003404:	461a      	mov	r2, r3
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800340e:	f04f 0100 	mov.w	r1, #0
 8003412:	ea02 0400 	and.w	r4, r2, r0
 8003416:	ea03 0501 	and.w	r5, r3, r1
 800341a:	4620      	mov	r0, r4
 800341c:	4629      	mov	r1, r5
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	014b      	lsls	r3, r1, #5
 8003428:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800342c:	0142      	lsls	r2, r0, #5
 800342e:	4610      	mov	r0, r2
 8003430:	4619      	mov	r1, r3
 8003432:	1b00      	subs	r0, r0, r4
 8003434:	eb61 0105 	sbc.w	r1, r1, r5
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	018b      	lsls	r3, r1, #6
 8003442:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003446:	0182      	lsls	r2, r0, #6
 8003448:	1a12      	subs	r2, r2, r0
 800344a:	eb63 0301 	sbc.w	r3, r3, r1
 800344e:	f04f 0000 	mov.w	r0, #0
 8003452:	f04f 0100 	mov.w	r1, #0
 8003456:	00d9      	lsls	r1, r3, #3
 8003458:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800345c:	00d0      	lsls	r0, r2, #3
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	1912      	adds	r2, r2, r4
 8003464:	eb45 0303 	adc.w	r3, r5, r3
 8003468:	f04f 0000 	mov.w	r0, #0
 800346c:	f04f 0100 	mov.w	r1, #0
 8003470:	0299      	lsls	r1, r3, #10
 8003472:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003476:	0290      	lsls	r0, r2, #10
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4610      	mov	r0, r2
 800347e:	4619      	mov	r1, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	461a      	mov	r2, r3
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	f7fd faf0 	bl	8000a6c <__aeabi_uldivmod>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4613      	mov	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	0c1b      	lsrs	r3, r3, #16
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	3301      	adds	r3, #1
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ac:	60bb      	str	r3, [r7, #8]
      break;
 80034ae:	e002      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034b2:	60bb      	str	r3, [r7, #8]
      break;
 80034b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034b6:	68bb      	ldr	r3, [r7, #8]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034c2:	bf00      	nop
 80034c4:	40023800 	.word	0x40023800
 80034c8:	00f42400 	.word	0x00f42400
 80034cc:	007a1200 	.word	0x007a1200

080034d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034d4:	4b03      	ldr	r3, [pc, #12]	; (80034e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034d6:	681b      	ldr	r3, [r3, #0]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	20000000 	.word	0x20000000

080034e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034ec:	f7ff fff0 	bl	80034d0 <HAL_RCC_GetHCLKFreq>
 80034f0:	4602      	mov	r2, r0
 80034f2:	4b05      	ldr	r3, [pc, #20]	; (8003508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	0a9b      	lsrs	r3, r3, #10
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	4903      	ldr	r1, [pc, #12]	; (800350c <HAL_RCC_GetPCLK1Freq+0x24>)
 80034fe:	5ccb      	ldrb	r3, [r1, r3]
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003504:	4618      	mov	r0, r3
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40023800 	.word	0x40023800
 800350c:	08004ed0 	.word	0x08004ed0

08003510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003514:	f7ff ffdc 	bl	80034d0 <HAL_RCC_GetHCLKFreq>
 8003518:	4602      	mov	r2, r0
 800351a:	4b05      	ldr	r3, [pc, #20]	; (8003530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	0b5b      	lsrs	r3, r3, #13
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	4903      	ldr	r1, [pc, #12]	; (8003534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003526:	5ccb      	ldrb	r3, [r1, r3]
 8003528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800352c:	4618      	mov	r0, r3
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40023800 	.word	0x40023800
 8003534:	08004ed0 	.word	0x08004ed0

08003538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e03f      	b.n	80035ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7fd fefe 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2224      	movs	r2, #36	; 0x24
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800357a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fe1d 	bl	80041bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b08a      	sub	sp, #40	; 0x28
 80035d6:	af02      	add	r7, sp, #8
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	603b      	str	r3, [r7, #0]
 80035de:	4613      	mov	r3, r2
 80035e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	d17c      	bne.n	80036ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_UART_Transmit+0x2c>
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e075      	b.n	80036ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_UART_Transmit+0x3e>
 800360c:	2302      	movs	r3, #2
 800360e:	e06e      	b.n	80036ee <HAL_UART_Transmit+0x11c>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2221      	movs	r2, #33	; 0x21
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003626:	f7fe f801 	bl	800162c <HAL_GetTick>
 800362a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	88fa      	ldrh	r2, [r7, #6]
 8003630:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	88fa      	ldrh	r2, [r7, #6]
 8003636:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003640:	d108      	bne.n	8003654 <HAL_UART_Transmit+0x82>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d104      	bne.n	8003654 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	61bb      	str	r3, [r7, #24]
 8003652:	e003      	b.n	800365c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003658:	2300      	movs	r3, #0
 800365a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003664:	e02a      	b.n	80036bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2200      	movs	r2, #0
 800366e:	2180      	movs	r1, #128	; 0x80
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fb9b 	bl	8003dac <UART_WaitOnFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e036      	b.n	80036ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10b      	bne.n	800369e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003694:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	3302      	adds	r3, #2
 800369a:	61bb      	str	r3, [r7, #24]
 800369c:	e007      	b.n	80036ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	781a      	ldrb	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	3301      	adds	r3, #1
 80036ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1cf      	bne.n	8003666 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2200      	movs	r2, #0
 80036ce:	2140      	movs	r1, #64	; 0x40
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fb6b 	bl	8003dac <UART_WaitOnFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e006      	b.n	80036ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	e000      	b.n	80036ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036ec:	2302      	movs	r3, #2
  }
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b08a      	sub	sp, #40	; 0x28
 80036fa:	af02      	add	r7, sp, #8
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	4613      	mov	r3, r2
 8003704:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b20      	cmp	r3, #32
 8003714:	f040 808c 	bne.w	8003830 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <HAL_UART_Receive+0x2e>
 800371e:	88fb      	ldrh	r3, [r7, #6]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e084      	b.n	8003832 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_UART_Receive+0x40>
 8003732:	2302      	movs	r3, #2
 8003734:	e07d      	b.n	8003832 <HAL_UART_Receive+0x13c>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2222      	movs	r2, #34	; 0x22
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003752:	f7fd ff6b 	bl	800162c <HAL_GetTick>
 8003756:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	88fa      	ldrh	r2, [r7, #6]
 800375c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	88fa      	ldrh	r2, [r7, #6]
 8003762:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376c:	d108      	bne.n	8003780 <HAL_UART_Receive+0x8a>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d104      	bne.n	8003780 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	e003      	b.n	8003788 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003784:	2300      	movs	r3, #0
 8003786:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003790:	e043      	b.n	800381a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2200      	movs	r2, #0
 800379a:	2120      	movs	r1, #32
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 fb05 	bl	8003dac <UART_WaitOnFlagUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e042      	b.n	8003832 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10c      	bne.n	80037cc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037be:	b29a      	uxth	r2, r3
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	3302      	adds	r3, #2
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	e01f      	b.n	800380c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d4:	d007      	beq.n	80037e6 <HAL_UART_Receive+0xf0>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <HAL_UART_Receive+0xfe>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	e008      	b.n	8003806 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003800:	b2da      	uxtb	r2, r3
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3301      	adds	r3, #1
 800380a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800381e:	b29b      	uxth	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1b6      	bne.n	8003792 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	e000      	b.n	8003832 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003830:	2302      	movs	r3, #2
  }
}
 8003832:	4618      	mov	r0, r3
 8003834:	3720      	adds	r7, #32
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b0ba      	sub	sp, #232	; 0xe8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003862:	2300      	movs	r3, #0
 8003864:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003868:	2300      	movs	r3, #0
 800386a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800386e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800387a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10f      	bne.n	80038a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_UART_IRQHandler+0x66>
 800388e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fbd3 	bl	8004046 <UART_Receive_IT>
      return;
 80038a0:	e256      	b.n	8003d50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 80de 	beq.w	8003a68 <HAL_UART_IRQHandler+0x22c>
 80038ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d106      	bne.n	80038c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80d1 	beq.w	8003a68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <HAL_UART_IRQHandler+0xae>
 80038d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f043 0201 	orr.w	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00b      	beq.n	800390e <HAL_UART_IRQHandler+0xd2>
 80038f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f043 0202 	orr.w	r2, r3, #2
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800390e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <HAL_UART_IRQHandler+0xf6>
 800391a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f043 0204 	orr.w	r2, r3, #4
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d011      	beq.n	8003962 <HAL_UART_IRQHandler+0x126>
 800393e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	d105      	bne.n	8003956 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800394a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f043 0208 	orr.w	r2, r3, #8
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 81ed 	beq.w	8003d46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800396c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_UART_IRQHandler+0x14e>
 8003978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 fb5e 	bl	8004046 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003994:	2b40      	cmp	r3, #64	; 0x40
 8003996:	bf0c      	ite	eq
 8003998:	2301      	moveq	r3, #1
 800399a:	2300      	movne	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <HAL_UART_IRQHandler+0x17a>
 80039ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d04f      	beq.n	8003a56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fa66 	bl	8003e88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d141      	bne.n	8003a4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3314      	adds	r3, #20
 80039d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3314      	adds	r3, #20
 80039f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1d9      	bne.n	80039ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d013      	beq.n	8003a46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	4a7d      	ldr	r2, [pc, #500]	; (8003c18 <HAL_UART_IRQHandler+0x3dc>)
 8003a24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe fcd8 	bl	80023e0 <HAL_DMA_Abort_IT>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d016      	beq.n	8003a64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a40:	4610      	mov	r0, r2
 8003a42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a44:	e00e      	b.n	8003a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f99a 	bl	8003d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a4c:	e00a      	b.n	8003a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f996 	bl	8003d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a54:	e006      	b.n	8003a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f992 	bl	8003d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a62:	e170      	b.n	8003d46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a64:	bf00      	nop
    return;
 8003a66:	e16e      	b.n	8003d46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	f040 814a 	bne.w	8003d06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8143 	beq.w	8003d06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 813c 	beq.w	8003d06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	f040 80b4 	bne.w	8003c1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ac0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 8140 	beq.w	8003d4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	f080 8139 	bcs.w	8003d4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ade:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aea:	f000 8088 	beq.w	8003bfe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	330c      	adds	r3, #12
 8003af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	330c      	adds	r3, #12
 8003b16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1d9      	bne.n	8003aee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3314      	adds	r3, #20
 8003b40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b4c:	f023 0301 	bic.w	r3, r3, #1
 8003b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3314      	adds	r3, #20
 8003b5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e1      	bne.n	8003b3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3314      	adds	r3, #20
 8003b7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3314      	adds	r3, #20
 8003b96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ba0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1e3      	bne.n	8003b76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	330c      	adds	r3, #12
 8003bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc6:	e853 3f00 	ldrex	r3, [r3]
 8003bca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bce:	f023 0310 	bic.w	r3, r3, #16
 8003bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	330c      	adds	r3, #12
 8003bdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003be0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003be2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003be6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e3      	bne.n	8003bbc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fe fb81 	bl	8002300 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f8c0 	bl	8003d94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c14:	e099      	b.n	8003d4a <HAL_UART_IRQHandler+0x50e>
 8003c16:	bf00      	nop
 8003c18:	08003f4f 	.word	0x08003f4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 808b 	beq.w	8003d4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003c38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8086 	beq.w	8003d4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	330c      	adds	r3, #12
 8003c48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c66:	647a      	str	r2, [r7, #68]	; 0x44
 8003c68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e3      	bne.n	8003c42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3314      	adds	r3, #20
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	623b      	str	r3, [r7, #32]
   return(result);
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3314      	adds	r3, #20
 8003c9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c9e:	633a      	str	r2, [r7, #48]	; 0x30
 8003ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1e3      	bne.n	8003c7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	330c      	adds	r3, #12
 8003cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	e853 3f00 	ldrex	r3, [r3]
 8003cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0310 	bic.w	r3, r3, #16
 8003cd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ce4:	61fa      	str	r2, [r7, #28]
 8003ce6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	69b9      	ldr	r1, [r7, #24]
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	e841 2300 	strex	r3, r2, [r1]
 8003cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e3      	bne.n	8003cc0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f848 	bl	8003d94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d04:	e023      	b.n	8003d4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <HAL_UART_IRQHandler+0x4ea>
 8003d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f929 	bl	8003f76 <UART_Transmit_IT>
    return;
 8003d24:	e014      	b.n	8003d50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00e      	beq.n	8003d50 <HAL_UART_IRQHandler+0x514>
 8003d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d008      	beq.n	8003d50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f969 	bl	8004016 <UART_EndTransmit_IT>
    return;
 8003d44:	e004      	b.n	8003d50 <HAL_UART_IRQHandler+0x514>
    return;
 8003d46:	bf00      	nop
 8003d48:	e002      	b.n	8003d50 <HAL_UART_IRQHandler+0x514>
      return;
 8003d4a:	bf00      	nop
 8003d4c:	e000      	b.n	8003d50 <HAL_UART_IRQHandler+0x514>
      return;
 8003d4e:	bf00      	nop
  }
}
 8003d50:	37e8      	adds	r7, #232	; 0xe8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop

08003d58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b090      	sub	sp, #64	; 0x40
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	4613      	mov	r3, r2
 8003dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dbc:	e050      	b.n	8003e60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc4:	d04c      	beq.n	8003e60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d007      	beq.n	8003ddc <UART_WaitOnFlagUntilTimeout+0x30>
 8003dcc:	f7fd fc2e 	bl	800162c <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d241      	bcs.n	8003e60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	330c      	adds	r3, #12
 8003dfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dfc:	637a      	str	r2, [r7, #52]	; 0x34
 8003dfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e5      	bne.n	8003ddc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3314      	adds	r3, #20
 8003e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	e853 3f00 	ldrex	r3, [r3]
 8003e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3314      	adds	r3, #20
 8003e2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e30:	623a      	str	r2, [r7, #32]
 8003e32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	69f9      	ldr	r1, [r7, #28]
 8003e36:	6a3a      	ldr	r2, [r7, #32]
 8003e38:	e841 2300 	strex	r3, r2, [r1]
 8003e3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e5      	bne.n	8003e10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e00f      	b.n	8003e80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d09f      	beq.n	8003dbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3740      	adds	r7, #64	; 0x40
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b095      	sub	sp, #84	; 0x54
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	330c      	adds	r3, #12
 8003e96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003eb0:	643a      	str	r2, [r7, #64]	; 0x40
 8003eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003eb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e5      	bne.n	8003e90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3314      	adds	r3, #20
 8003eca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 8003eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3314      	adds	r3, #20
 8003ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ee4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e5      	bne.n	8003ec4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d119      	bne.n	8003f34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	330c      	adds	r3, #12
 8003f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	e853 3f00 	ldrex	r3, [r3]
 8003f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f023 0310 	bic.w	r3, r3, #16
 8003f16:	647b      	str	r3, [r7, #68]	; 0x44
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	330c      	adds	r3, #12
 8003f1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f20:	61ba      	str	r2, [r7, #24]
 8003f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	6979      	ldr	r1, [r7, #20]
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	e841 2300 	strex	r3, r2, [r1]
 8003f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1e5      	bne.n	8003f00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f42:	bf00      	nop
 8003f44:	3754      	adds	r7, #84	; 0x54
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f7ff ff09 	bl	8003d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b085      	sub	sp, #20
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b21      	cmp	r3, #33	; 0x21
 8003f88:	d13e      	bne.n	8004008 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f92:	d114      	bne.n	8003fbe <UART_Transmit_IT+0x48>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d110      	bne.n	8003fbe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	1c9a      	adds	r2, r3, #2
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	621a      	str	r2, [r3, #32]
 8003fbc:	e008      	b.n	8003fd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	1c59      	adds	r1, r3, #1
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6211      	str	r1, [r2, #32]
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10f      	bne.n	8004004 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ff2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004002:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	e000      	b.n	800400a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004008:	2302      	movs	r3, #2
  }
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800402c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff fe8e 	bl	8003d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b08c      	sub	sp, #48	; 0x30
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b22      	cmp	r3, #34	; 0x22
 8004058:	f040 80ab 	bne.w	80041b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004064:	d117      	bne.n	8004096 <UART_Receive_IT+0x50>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d113      	bne.n	8004096 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800406e:	2300      	movs	r3, #0
 8004070:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004084:	b29a      	uxth	r2, r3
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408e:	1c9a      	adds	r2, r3, #2
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	629a      	str	r2, [r3, #40]	; 0x28
 8004094:	e026      	b.n	80040e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800409c:	2300      	movs	r3, #0
 800409e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a8:	d007      	beq.n	80040ba <UART_Receive_IT+0x74>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10a      	bne.n	80040c8 <UART_Receive_IT+0x82>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c4:	701a      	strb	r2, [r3, #0]
 80040c6:	e008      	b.n	80040da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	4619      	mov	r1, r3
 80040f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d15a      	bne.n	80041ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0220 	bic.w	r2, r2, #32
 8004106:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004116:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	2b01      	cmp	r3, #1
 8004136:	d135      	bne.n	80041a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	613b      	str	r3, [r7, #16]
   return(result);
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f023 0310 	bic.w	r3, r3, #16
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415e:	623a      	str	r2, [r7, #32]
 8004160:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	69f9      	ldr	r1, [r7, #28]
 8004164:	6a3a      	ldr	r2, [r7, #32]
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	61bb      	str	r3, [r7, #24]
   return(result);
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1e5      	bne.n	800413e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b10      	cmp	r3, #16
 800417e:	d10a      	bne.n	8004196 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800419a:	4619      	mov	r1, r3
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff fdf9 	bl	8003d94 <HAL_UARTEx_RxEventCallback>
 80041a2:	e002      	b.n	80041aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff fde1 	bl	8003d6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e002      	b.n	80041b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	e000      	b.n	80041b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80041b2:	2302      	movs	r3, #2
  }
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3730      	adds	r7, #48	; 0x30
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c0:	b09f      	sub	sp, #124	; 0x7c
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d2:	68d9      	ldr	r1, [r3, #12]
 80041d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	ea40 0301 	orr.w	r3, r0, r1
 80041dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	431a      	orrs	r2, r3
 80041ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80041f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004200:	f021 010c 	bic.w	r1, r1, #12
 8004204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800420a:	430b      	orrs	r3, r1
 800420c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800420e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421a:	6999      	ldr	r1, [r3, #24]
 800421c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	ea40 0301 	orr.w	r3, r0, r1
 8004224:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4bc5      	ldr	r3, [pc, #788]	; (8004540 <UART_SetConfig+0x384>)
 800422c:	429a      	cmp	r2, r3
 800422e:	d004      	beq.n	800423a <UART_SetConfig+0x7e>
 8004230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4bc3      	ldr	r3, [pc, #780]	; (8004544 <UART_SetConfig+0x388>)
 8004236:	429a      	cmp	r2, r3
 8004238:	d103      	bne.n	8004242 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800423a:	f7ff f969 	bl	8003510 <HAL_RCC_GetPCLK2Freq>
 800423e:	6778      	str	r0, [r7, #116]	; 0x74
 8004240:	e002      	b.n	8004248 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004242:	f7ff f951 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 8004246:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004250:	f040 80b6 	bne.w	80043c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004256:	461c      	mov	r4, r3
 8004258:	f04f 0500 	mov.w	r5, #0
 800425c:	4622      	mov	r2, r4
 800425e:	462b      	mov	r3, r5
 8004260:	1891      	adds	r1, r2, r2
 8004262:	6439      	str	r1, [r7, #64]	; 0x40
 8004264:	415b      	adcs	r3, r3
 8004266:	647b      	str	r3, [r7, #68]	; 0x44
 8004268:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800426c:	1912      	adds	r2, r2, r4
 800426e:	eb45 0303 	adc.w	r3, r5, r3
 8004272:	f04f 0000 	mov.w	r0, #0
 8004276:	f04f 0100 	mov.w	r1, #0
 800427a:	00d9      	lsls	r1, r3, #3
 800427c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004280:	00d0      	lsls	r0, r2, #3
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	1911      	adds	r1, r2, r4
 8004288:	6639      	str	r1, [r7, #96]	; 0x60
 800428a:	416b      	adcs	r3, r5
 800428c:	667b      	str	r3, [r7, #100]	; 0x64
 800428e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	461a      	mov	r2, r3
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	1891      	adds	r1, r2, r2
 800429a:	63b9      	str	r1, [r7, #56]	; 0x38
 800429c:	415b      	adcs	r3, r3
 800429e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80042a8:	f7fc fbe0 	bl	8000a6c <__aeabi_uldivmod>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4ba5      	ldr	r3, [pc, #660]	; (8004548 <UART_SetConfig+0x38c>)
 80042b2:	fba3 2302 	umull	r2, r3, r3, r2
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	011e      	lsls	r6, r3, #4
 80042ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042bc:	461c      	mov	r4, r3
 80042be:	f04f 0500 	mov.w	r5, #0
 80042c2:	4622      	mov	r2, r4
 80042c4:	462b      	mov	r3, r5
 80042c6:	1891      	adds	r1, r2, r2
 80042c8:	6339      	str	r1, [r7, #48]	; 0x30
 80042ca:	415b      	adcs	r3, r3
 80042cc:	637b      	str	r3, [r7, #52]	; 0x34
 80042ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80042d2:	1912      	adds	r2, r2, r4
 80042d4:	eb45 0303 	adc.w	r3, r5, r3
 80042d8:	f04f 0000 	mov.w	r0, #0
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	00d9      	lsls	r1, r3, #3
 80042e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042e6:	00d0      	lsls	r0, r2, #3
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	1911      	adds	r1, r2, r4
 80042ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80042f0:	416b      	adcs	r3, r5
 80042f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	461a      	mov	r2, r3
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	1891      	adds	r1, r2, r2
 8004300:	62b9      	str	r1, [r7, #40]	; 0x28
 8004302:	415b      	adcs	r3, r3
 8004304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004306:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800430a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800430e:	f7fc fbad 	bl	8000a6c <__aeabi_uldivmod>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4b8c      	ldr	r3, [pc, #560]	; (8004548 <UART_SetConfig+0x38c>)
 8004318:	fba3 1302 	umull	r1, r3, r3, r2
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	2164      	movs	r1, #100	; 0x64
 8004320:	fb01 f303 	mul.w	r3, r1, r3
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	3332      	adds	r3, #50	; 0x32
 800432a:	4a87      	ldr	r2, [pc, #540]	; (8004548 <UART_SetConfig+0x38c>)
 800432c:	fba2 2303 	umull	r2, r3, r2, r3
 8004330:	095b      	lsrs	r3, r3, #5
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004338:	441e      	add	r6, r3
 800433a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800433c:	4618      	mov	r0, r3
 800433e:	f04f 0100 	mov.w	r1, #0
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	1894      	adds	r4, r2, r2
 8004348:	623c      	str	r4, [r7, #32]
 800434a:	415b      	adcs	r3, r3
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
 800434e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004352:	1812      	adds	r2, r2, r0
 8004354:	eb41 0303 	adc.w	r3, r1, r3
 8004358:	f04f 0400 	mov.w	r4, #0
 800435c:	f04f 0500 	mov.w	r5, #0
 8004360:	00dd      	lsls	r5, r3, #3
 8004362:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004366:	00d4      	lsls	r4, r2, #3
 8004368:	4622      	mov	r2, r4
 800436a:	462b      	mov	r3, r5
 800436c:	1814      	adds	r4, r2, r0
 800436e:	653c      	str	r4, [r7, #80]	; 0x50
 8004370:	414b      	adcs	r3, r1
 8004372:	657b      	str	r3, [r7, #84]	; 0x54
 8004374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	461a      	mov	r2, r3
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	1891      	adds	r1, r2, r2
 8004380:	61b9      	str	r1, [r7, #24]
 8004382:	415b      	adcs	r3, r3
 8004384:	61fb      	str	r3, [r7, #28]
 8004386:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800438a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800438e:	f7fc fb6d 	bl	8000a6c <__aeabi_uldivmod>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4b6c      	ldr	r3, [pc, #432]	; (8004548 <UART_SetConfig+0x38c>)
 8004398:	fba3 1302 	umull	r1, r3, r3, r2
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	2164      	movs	r1, #100	; 0x64
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	3332      	adds	r3, #50	; 0x32
 80043aa:	4a67      	ldr	r2, [pc, #412]	; (8004548 <UART_SetConfig+0x38c>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	f003 0207 	and.w	r2, r3, #7
 80043b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4432      	add	r2, r6
 80043bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043be:	e0b9      	b.n	8004534 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c2:	461c      	mov	r4, r3
 80043c4:	f04f 0500 	mov.w	r5, #0
 80043c8:	4622      	mov	r2, r4
 80043ca:	462b      	mov	r3, r5
 80043cc:	1891      	adds	r1, r2, r2
 80043ce:	6139      	str	r1, [r7, #16]
 80043d0:	415b      	adcs	r3, r3
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80043d8:	1912      	adds	r2, r2, r4
 80043da:	eb45 0303 	adc.w	r3, r5, r3
 80043de:	f04f 0000 	mov.w	r0, #0
 80043e2:	f04f 0100 	mov.w	r1, #0
 80043e6:	00d9      	lsls	r1, r3, #3
 80043e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043ec:	00d0      	lsls	r0, r2, #3
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	eb12 0804 	adds.w	r8, r2, r4
 80043f6:	eb43 0905 	adc.w	r9, r3, r5
 80043fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	4618      	mov	r0, r3
 8004400:	f04f 0100 	mov.w	r1, #0
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	008b      	lsls	r3, r1, #2
 800440e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004412:	0082      	lsls	r2, r0, #2
 8004414:	4640      	mov	r0, r8
 8004416:	4649      	mov	r1, r9
 8004418:	f7fc fb28 	bl	8000a6c <__aeabi_uldivmod>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4b49      	ldr	r3, [pc, #292]	; (8004548 <UART_SetConfig+0x38c>)
 8004422:	fba3 2302 	umull	r2, r3, r3, r2
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	011e      	lsls	r6, r3, #4
 800442a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800442c:	4618      	mov	r0, r3
 800442e:	f04f 0100 	mov.w	r1, #0
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	1894      	adds	r4, r2, r2
 8004438:	60bc      	str	r4, [r7, #8]
 800443a:	415b      	adcs	r3, r3
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004442:	1812      	adds	r2, r2, r0
 8004444:	eb41 0303 	adc.w	r3, r1, r3
 8004448:	f04f 0400 	mov.w	r4, #0
 800444c:	f04f 0500 	mov.w	r5, #0
 8004450:	00dd      	lsls	r5, r3, #3
 8004452:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004456:	00d4      	lsls	r4, r2, #3
 8004458:	4622      	mov	r2, r4
 800445a:	462b      	mov	r3, r5
 800445c:	1814      	adds	r4, r2, r0
 800445e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004460:	414b      	adcs	r3, r1
 8004462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	4618      	mov	r0, r3
 800446a:	f04f 0100 	mov.w	r1, #0
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	008b      	lsls	r3, r1, #2
 8004478:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800447c:	0082      	lsls	r2, r0, #2
 800447e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004482:	f7fc faf3 	bl	8000a6c <__aeabi_uldivmod>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	4b2f      	ldr	r3, [pc, #188]	; (8004548 <UART_SetConfig+0x38c>)
 800448c:	fba3 1302 	umull	r1, r3, r3, r2
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	2164      	movs	r1, #100	; 0x64
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	3332      	adds	r3, #50	; 0x32
 800449e:	4a2a      	ldr	r2, [pc, #168]	; (8004548 <UART_SetConfig+0x38c>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044aa:	441e      	add	r6, r3
 80044ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ae:	4618      	mov	r0, r3
 80044b0:	f04f 0100 	mov.w	r1, #0
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	1894      	adds	r4, r2, r2
 80044ba:	603c      	str	r4, [r7, #0]
 80044bc:	415b      	adcs	r3, r3
 80044be:	607b      	str	r3, [r7, #4]
 80044c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044c4:	1812      	adds	r2, r2, r0
 80044c6:	eb41 0303 	adc.w	r3, r1, r3
 80044ca:	f04f 0400 	mov.w	r4, #0
 80044ce:	f04f 0500 	mov.w	r5, #0
 80044d2:	00dd      	lsls	r5, r3, #3
 80044d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044d8:	00d4      	lsls	r4, r2, #3
 80044da:	4622      	mov	r2, r4
 80044dc:	462b      	mov	r3, r5
 80044de:	eb12 0a00 	adds.w	sl, r2, r0
 80044e2:	eb43 0b01 	adc.w	fp, r3, r1
 80044e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f04f 0100 	mov.w	r1, #0
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	008b      	lsls	r3, r1, #2
 80044fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044fe:	0082      	lsls	r2, r0, #2
 8004500:	4650      	mov	r0, sl
 8004502:	4659      	mov	r1, fp
 8004504:	f7fc fab2 	bl	8000a6c <__aeabi_uldivmod>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4b0e      	ldr	r3, [pc, #56]	; (8004548 <UART_SetConfig+0x38c>)
 800450e:	fba3 1302 	umull	r1, r3, r3, r2
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	2164      	movs	r1, #100	; 0x64
 8004516:	fb01 f303 	mul.w	r3, r1, r3
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	3332      	adds	r3, #50	; 0x32
 8004520:	4a09      	ldr	r2, [pc, #36]	; (8004548 <UART_SetConfig+0x38c>)
 8004522:	fba2 2303 	umull	r2, r3, r2, r3
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	f003 020f 	and.w	r2, r3, #15
 800452c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4432      	add	r2, r6
 8004532:	609a      	str	r2, [r3, #8]
}
 8004534:	bf00      	nop
 8004536:	377c      	adds	r7, #124	; 0x7c
 8004538:	46bd      	mov	sp, r7
 800453a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800453e:	bf00      	nop
 8004540:	40011000 	.word	0x40011000
 8004544:	40011400 	.word	0x40011400
 8004548:	51eb851f 	.word	0x51eb851f

0800454c <__errno>:
 800454c:	4b01      	ldr	r3, [pc, #4]	; (8004554 <__errno+0x8>)
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	2000000c 	.word	0x2000000c

08004558 <__libc_init_array>:
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	4d0d      	ldr	r5, [pc, #52]	; (8004590 <__libc_init_array+0x38>)
 800455c:	4c0d      	ldr	r4, [pc, #52]	; (8004594 <__libc_init_array+0x3c>)
 800455e:	1b64      	subs	r4, r4, r5
 8004560:	10a4      	asrs	r4, r4, #2
 8004562:	2600      	movs	r6, #0
 8004564:	42a6      	cmp	r6, r4
 8004566:	d109      	bne.n	800457c <__libc_init_array+0x24>
 8004568:	4d0b      	ldr	r5, [pc, #44]	; (8004598 <__libc_init_array+0x40>)
 800456a:	4c0c      	ldr	r4, [pc, #48]	; (800459c <__libc_init_array+0x44>)
 800456c:	f000 fc4e 	bl	8004e0c <_init>
 8004570:	1b64      	subs	r4, r4, r5
 8004572:	10a4      	asrs	r4, r4, #2
 8004574:	2600      	movs	r6, #0
 8004576:	42a6      	cmp	r6, r4
 8004578:	d105      	bne.n	8004586 <__libc_init_array+0x2e>
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004580:	4798      	blx	r3
 8004582:	3601      	adds	r6, #1
 8004584:	e7ee      	b.n	8004564 <__libc_init_array+0xc>
 8004586:	f855 3b04 	ldr.w	r3, [r5], #4
 800458a:	4798      	blx	r3
 800458c:	3601      	adds	r6, #1
 800458e:	e7f2      	b.n	8004576 <__libc_init_array+0x1e>
 8004590:	08004f1c 	.word	0x08004f1c
 8004594:	08004f1c 	.word	0x08004f1c
 8004598:	08004f1c 	.word	0x08004f1c
 800459c:	08004f20 	.word	0x08004f20

080045a0 <memset>:
 80045a0:	4402      	add	r2, r0
 80045a2:	4603      	mov	r3, r0
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d100      	bne.n	80045aa <memset+0xa>
 80045a8:	4770      	bx	lr
 80045aa:	f803 1b01 	strb.w	r1, [r3], #1
 80045ae:	e7f9      	b.n	80045a4 <memset+0x4>

080045b0 <siprintf>:
 80045b0:	b40e      	push	{r1, r2, r3}
 80045b2:	b500      	push	{lr}
 80045b4:	b09c      	sub	sp, #112	; 0x70
 80045b6:	ab1d      	add	r3, sp, #116	; 0x74
 80045b8:	9002      	str	r0, [sp, #8]
 80045ba:	9006      	str	r0, [sp, #24]
 80045bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045c0:	4809      	ldr	r0, [pc, #36]	; (80045e8 <siprintf+0x38>)
 80045c2:	9107      	str	r1, [sp, #28]
 80045c4:	9104      	str	r1, [sp, #16]
 80045c6:	4909      	ldr	r1, [pc, #36]	; (80045ec <siprintf+0x3c>)
 80045c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80045cc:	9105      	str	r1, [sp, #20]
 80045ce:	6800      	ldr	r0, [r0, #0]
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	a902      	add	r1, sp, #8
 80045d4:	f000 f868 	bl	80046a8 <_svfiprintf_r>
 80045d8:	9b02      	ldr	r3, [sp, #8]
 80045da:	2200      	movs	r2, #0
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	b01c      	add	sp, #112	; 0x70
 80045e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80045e4:	b003      	add	sp, #12
 80045e6:	4770      	bx	lr
 80045e8:	2000000c 	.word	0x2000000c
 80045ec:	ffff0208 	.word	0xffff0208

080045f0 <__ssputs_r>:
 80045f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045f4:	688e      	ldr	r6, [r1, #8]
 80045f6:	429e      	cmp	r6, r3
 80045f8:	4682      	mov	sl, r0
 80045fa:	460c      	mov	r4, r1
 80045fc:	4690      	mov	r8, r2
 80045fe:	461f      	mov	r7, r3
 8004600:	d838      	bhi.n	8004674 <__ssputs_r+0x84>
 8004602:	898a      	ldrh	r2, [r1, #12]
 8004604:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004608:	d032      	beq.n	8004670 <__ssputs_r+0x80>
 800460a:	6825      	ldr	r5, [r4, #0]
 800460c:	6909      	ldr	r1, [r1, #16]
 800460e:	eba5 0901 	sub.w	r9, r5, r1
 8004612:	6965      	ldr	r5, [r4, #20]
 8004614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004618:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800461c:	3301      	adds	r3, #1
 800461e:	444b      	add	r3, r9
 8004620:	106d      	asrs	r5, r5, #1
 8004622:	429d      	cmp	r5, r3
 8004624:	bf38      	it	cc
 8004626:	461d      	movcc	r5, r3
 8004628:	0553      	lsls	r3, r2, #21
 800462a:	d531      	bpl.n	8004690 <__ssputs_r+0xa0>
 800462c:	4629      	mov	r1, r5
 800462e:	f000 fb47 	bl	8004cc0 <_malloc_r>
 8004632:	4606      	mov	r6, r0
 8004634:	b950      	cbnz	r0, 800464c <__ssputs_r+0x5c>
 8004636:	230c      	movs	r3, #12
 8004638:	f8ca 3000 	str.w	r3, [sl]
 800463c:	89a3      	ldrh	r3, [r4, #12]
 800463e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004642:	81a3      	strh	r3, [r4, #12]
 8004644:	f04f 30ff 	mov.w	r0, #4294967295
 8004648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800464c:	6921      	ldr	r1, [r4, #16]
 800464e:	464a      	mov	r2, r9
 8004650:	f000 fabe 	bl	8004bd0 <memcpy>
 8004654:	89a3      	ldrh	r3, [r4, #12]
 8004656:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800465a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800465e:	81a3      	strh	r3, [r4, #12]
 8004660:	6126      	str	r6, [r4, #16]
 8004662:	6165      	str	r5, [r4, #20]
 8004664:	444e      	add	r6, r9
 8004666:	eba5 0509 	sub.w	r5, r5, r9
 800466a:	6026      	str	r6, [r4, #0]
 800466c:	60a5      	str	r5, [r4, #8]
 800466e:	463e      	mov	r6, r7
 8004670:	42be      	cmp	r6, r7
 8004672:	d900      	bls.n	8004676 <__ssputs_r+0x86>
 8004674:	463e      	mov	r6, r7
 8004676:	4632      	mov	r2, r6
 8004678:	6820      	ldr	r0, [r4, #0]
 800467a:	4641      	mov	r1, r8
 800467c:	f000 fab6 	bl	8004bec <memmove>
 8004680:	68a3      	ldr	r3, [r4, #8]
 8004682:	6822      	ldr	r2, [r4, #0]
 8004684:	1b9b      	subs	r3, r3, r6
 8004686:	4432      	add	r2, r6
 8004688:	60a3      	str	r3, [r4, #8]
 800468a:	6022      	str	r2, [r4, #0]
 800468c:	2000      	movs	r0, #0
 800468e:	e7db      	b.n	8004648 <__ssputs_r+0x58>
 8004690:	462a      	mov	r2, r5
 8004692:	f000 fb6f 	bl	8004d74 <_realloc_r>
 8004696:	4606      	mov	r6, r0
 8004698:	2800      	cmp	r0, #0
 800469a:	d1e1      	bne.n	8004660 <__ssputs_r+0x70>
 800469c:	6921      	ldr	r1, [r4, #16]
 800469e:	4650      	mov	r0, sl
 80046a0:	f000 fabe 	bl	8004c20 <_free_r>
 80046a4:	e7c7      	b.n	8004636 <__ssputs_r+0x46>
	...

080046a8 <_svfiprintf_r>:
 80046a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ac:	4698      	mov	r8, r3
 80046ae:	898b      	ldrh	r3, [r1, #12]
 80046b0:	061b      	lsls	r3, r3, #24
 80046b2:	b09d      	sub	sp, #116	; 0x74
 80046b4:	4607      	mov	r7, r0
 80046b6:	460d      	mov	r5, r1
 80046b8:	4614      	mov	r4, r2
 80046ba:	d50e      	bpl.n	80046da <_svfiprintf_r+0x32>
 80046bc:	690b      	ldr	r3, [r1, #16]
 80046be:	b963      	cbnz	r3, 80046da <_svfiprintf_r+0x32>
 80046c0:	2140      	movs	r1, #64	; 0x40
 80046c2:	f000 fafd 	bl	8004cc0 <_malloc_r>
 80046c6:	6028      	str	r0, [r5, #0]
 80046c8:	6128      	str	r0, [r5, #16]
 80046ca:	b920      	cbnz	r0, 80046d6 <_svfiprintf_r+0x2e>
 80046cc:	230c      	movs	r3, #12
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	f04f 30ff 	mov.w	r0, #4294967295
 80046d4:	e0d1      	b.n	800487a <_svfiprintf_r+0x1d2>
 80046d6:	2340      	movs	r3, #64	; 0x40
 80046d8:	616b      	str	r3, [r5, #20]
 80046da:	2300      	movs	r3, #0
 80046dc:	9309      	str	r3, [sp, #36]	; 0x24
 80046de:	2320      	movs	r3, #32
 80046e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80046e8:	2330      	movs	r3, #48	; 0x30
 80046ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004894 <_svfiprintf_r+0x1ec>
 80046ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046f2:	f04f 0901 	mov.w	r9, #1
 80046f6:	4623      	mov	r3, r4
 80046f8:	469a      	mov	sl, r3
 80046fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046fe:	b10a      	cbz	r2, 8004704 <_svfiprintf_r+0x5c>
 8004700:	2a25      	cmp	r2, #37	; 0x25
 8004702:	d1f9      	bne.n	80046f8 <_svfiprintf_r+0x50>
 8004704:	ebba 0b04 	subs.w	fp, sl, r4
 8004708:	d00b      	beq.n	8004722 <_svfiprintf_r+0x7a>
 800470a:	465b      	mov	r3, fp
 800470c:	4622      	mov	r2, r4
 800470e:	4629      	mov	r1, r5
 8004710:	4638      	mov	r0, r7
 8004712:	f7ff ff6d 	bl	80045f0 <__ssputs_r>
 8004716:	3001      	adds	r0, #1
 8004718:	f000 80aa 	beq.w	8004870 <_svfiprintf_r+0x1c8>
 800471c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800471e:	445a      	add	r2, fp
 8004720:	9209      	str	r2, [sp, #36]	; 0x24
 8004722:	f89a 3000 	ldrb.w	r3, [sl]
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 80a2 	beq.w	8004870 <_svfiprintf_r+0x1c8>
 800472c:	2300      	movs	r3, #0
 800472e:	f04f 32ff 	mov.w	r2, #4294967295
 8004732:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004736:	f10a 0a01 	add.w	sl, sl, #1
 800473a:	9304      	str	r3, [sp, #16]
 800473c:	9307      	str	r3, [sp, #28]
 800473e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004742:	931a      	str	r3, [sp, #104]	; 0x68
 8004744:	4654      	mov	r4, sl
 8004746:	2205      	movs	r2, #5
 8004748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800474c:	4851      	ldr	r0, [pc, #324]	; (8004894 <_svfiprintf_r+0x1ec>)
 800474e:	f7fb fd4f 	bl	80001f0 <memchr>
 8004752:	9a04      	ldr	r2, [sp, #16]
 8004754:	b9d8      	cbnz	r0, 800478e <_svfiprintf_r+0xe6>
 8004756:	06d0      	lsls	r0, r2, #27
 8004758:	bf44      	itt	mi
 800475a:	2320      	movmi	r3, #32
 800475c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004760:	0711      	lsls	r1, r2, #28
 8004762:	bf44      	itt	mi
 8004764:	232b      	movmi	r3, #43	; 0x2b
 8004766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800476a:	f89a 3000 	ldrb.w	r3, [sl]
 800476e:	2b2a      	cmp	r3, #42	; 0x2a
 8004770:	d015      	beq.n	800479e <_svfiprintf_r+0xf6>
 8004772:	9a07      	ldr	r2, [sp, #28]
 8004774:	4654      	mov	r4, sl
 8004776:	2000      	movs	r0, #0
 8004778:	f04f 0c0a 	mov.w	ip, #10
 800477c:	4621      	mov	r1, r4
 800477e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004782:	3b30      	subs	r3, #48	; 0x30
 8004784:	2b09      	cmp	r3, #9
 8004786:	d94e      	bls.n	8004826 <_svfiprintf_r+0x17e>
 8004788:	b1b0      	cbz	r0, 80047b8 <_svfiprintf_r+0x110>
 800478a:	9207      	str	r2, [sp, #28]
 800478c:	e014      	b.n	80047b8 <_svfiprintf_r+0x110>
 800478e:	eba0 0308 	sub.w	r3, r0, r8
 8004792:	fa09 f303 	lsl.w	r3, r9, r3
 8004796:	4313      	orrs	r3, r2
 8004798:	9304      	str	r3, [sp, #16]
 800479a:	46a2      	mov	sl, r4
 800479c:	e7d2      	b.n	8004744 <_svfiprintf_r+0x9c>
 800479e:	9b03      	ldr	r3, [sp, #12]
 80047a0:	1d19      	adds	r1, r3, #4
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	9103      	str	r1, [sp, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bfbb      	ittet	lt
 80047aa:	425b      	neglt	r3, r3
 80047ac:	f042 0202 	orrlt.w	r2, r2, #2
 80047b0:	9307      	strge	r3, [sp, #28]
 80047b2:	9307      	strlt	r3, [sp, #28]
 80047b4:	bfb8      	it	lt
 80047b6:	9204      	strlt	r2, [sp, #16]
 80047b8:	7823      	ldrb	r3, [r4, #0]
 80047ba:	2b2e      	cmp	r3, #46	; 0x2e
 80047bc:	d10c      	bne.n	80047d8 <_svfiprintf_r+0x130>
 80047be:	7863      	ldrb	r3, [r4, #1]
 80047c0:	2b2a      	cmp	r3, #42	; 0x2a
 80047c2:	d135      	bne.n	8004830 <_svfiprintf_r+0x188>
 80047c4:	9b03      	ldr	r3, [sp, #12]
 80047c6:	1d1a      	adds	r2, r3, #4
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	9203      	str	r2, [sp, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	bfb8      	it	lt
 80047d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80047d4:	3402      	adds	r4, #2
 80047d6:	9305      	str	r3, [sp, #20]
 80047d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80048a4 <_svfiprintf_r+0x1fc>
 80047dc:	7821      	ldrb	r1, [r4, #0]
 80047de:	2203      	movs	r2, #3
 80047e0:	4650      	mov	r0, sl
 80047e2:	f7fb fd05 	bl	80001f0 <memchr>
 80047e6:	b140      	cbz	r0, 80047fa <_svfiprintf_r+0x152>
 80047e8:	2340      	movs	r3, #64	; 0x40
 80047ea:	eba0 000a 	sub.w	r0, r0, sl
 80047ee:	fa03 f000 	lsl.w	r0, r3, r0
 80047f2:	9b04      	ldr	r3, [sp, #16]
 80047f4:	4303      	orrs	r3, r0
 80047f6:	3401      	adds	r4, #1
 80047f8:	9304      	str	r3, [sp, #16]
 80047fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047fe:	4826      	ldr	r0, [pc, #152]	; (8004898 <_svfiprintf_r+0x1f0>)
 8004800:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004804:	2206      	movs	r2, #6
 8004806:	f7fb fcf3 	bl	80001f0 <memchr>
 800480a:	2800      	cmp	r0, #0
 800480c:	d038      	beq.n	8004880 <_svfiprintf_r+0x1d8>
 800480e:	4b23      	ldr	r3, [pc, #140]	; (800489c <_svfiprintf_r+0x1f4>)
 8004810:	bb1b      	cbnz	r3, 800485a <_svfiprintf_r+0x1b2>
 8004812:	9b03      	ldr	r3, [sp, #12]
 8004814:	3307      	adds	r3, #7
 8004816:	f023 0307 	bic.w	r3, r3, #7
 800481a:	3308      	adds	r3, #8
 800481c:	9303      	str	r3, [sp, #12]
 800481e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004820:	4433      	add	r3, r6
 8004822:	9309      	str	r3, [sp, #36]	; 0x24
 8004824:	e767      	b.n	80046f6 <_svfiprintf_r+0x4e>
 8004826:	fb0c 3202 	mla	r2, ip, r2, r3
 800482a:	460c      	mov	r4, r1
 800482c:	2001      	movs	r0, #1
 800482e:	e7a5      	b.n	800477c <_svfiprintf_r+0xd4>
 8004830:	2300      	movs	r3, #0
 8004832:	3401      	adds	r4, #1
 8004834:	9305      	str	r3, [sp, #20]
 8004836:	4619      	mov	r1, r3
 8004838:	f04f 0c0a 	mov.w	ip, #10
 800483c:	4620      	mov	r0, r4
 800483e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004842:	3a30      	subs	r2, #48	; 0x30
 8004844:	2a09      	cmp	r2, #9
 8004846:	d903      	bls.n	8004850 <_svfiprintf_r+0x1a8>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0c5      	beq.n	80047d8 <_svfiprintf_r+0x130>
 800484c:	9105      	str	r1, [sp, #20]
 800484e:	e7c3      	b.n	80047d8 <_svfiprintf_r+0x130>
 8004850:	fb0c 2101 	mla	r1, ip, r1, r2
 8004854:	4604      	mov	r4, r0
 8004856:	2301      	movs	r3, #1
 8004858:	e7f0      	b.n	800483c <_svfiprintf_r+0x194>
 800485a:	ab03      	add	r3, sp, #12
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	462a      	mov	r2, r5
 8004860:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <_svfiprintf_r+0x1f8>)
 8004862:	a904      	add	r1, sp, #16
 8004864:	4638      	mov	r0, r7
 8004866:	f3af 8000 	nop.w
 800486a:	1c42      	adds	r2, r0, #1
 800486c:	4606      	mov	r6, r0
 800486e:	d1d6      	bne.n	800481e <_svfiprintf_r+0x176>
 8004870:	89ab      	ldrh	r3, [r5, #12]
 8004872:	065b      	lsls	r3, r3, #25
 8004874:	f53f af2c 	bmi.w	80046d0 <_svfiprintf_r+0x28>
 8004878:	9809      	ldr	r0, [sp, #36]	; 0x24
 800487a:	b01d      	add	sp, #116	; 0x74
 800487c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004880:	ab03      	add	r3, sp, #12
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	462a      	mov	r2, r5
 8004886:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <_svfiprintf_r+0x1f8>)
 8004888:	a904      	add	r1, sp, #16
 800488a:	4638      	mov	r0, r7
 800488c:	f000 f87a 	bl	8004984 <_printf_i>
 8004890:	e7eb      	b.n	800486a <_svfiprintf_r+0x1c2>
 8004892:	bf00      	nop
 8004894:	08004ee0 	.word	0x08004ee0
 8004898:	08004eea 	.word	0x08004eea
 800489c:	00000000 	.word	0x00000000
 80048a0:	080045f1 	.word	0x080045f1
 80048a4:	08004ee6 	.word	0x08004ee6

080048a8 <_printf_common>:
 80048a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048ac:	4616      	mov	r6, r2
 80048ae:	4699      	mov	r9, r3
 80048b0:	688a      	ldr	r2, [r1, #8]
 80048b2:	690b      	ldr	r3, [r1, #16]
 80048b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048b8:	4293      	cmp	r3, r2
 80048ba:	bfb8      	it	lt
 80048bc:	4613      	movlt	r3, r2
 80048be:	6033      	str	r3, [r6, #0]
 80048c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048c4:	4607      	mov	r7, r0
 80048c6:	460c      	mov	r4, r1
 80048c8:	b10a      	cbz	r2, 80048ce <_printf_common+0x26>
 80048ca:	3301      	adds	r3, #1
 80048cc:	6033      	str	r3, [r6, #0]
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	0699      	lsls	r1, r3, #26
 80048d2:	bf42      	ittt	mi
 80048d4:	6833      	ldrmi	r3, [r6, #0]
 80048d6:	3302      	addmi	r3, #2
 80048d8:	6033      	strmi	r3, [r6, #0]
 80048da:	6825      	ldr	r5, [r4, #0]
 80048dc:	f015 0506 	ands.w	r5, r5, #6
 80048e0:	d106      	bne.n	80048f0 <_printf_common+0x48>
 80048e2:	f104 0a19 	add.w	sl, r4, #25
 80048e6:	68e3      	ldr	r3, [r4, #12]
 80048e8:	6832      	ldr	r2, [r6, #0]
 80048ea:	1a9b      	subs	r3, r3, r2
 80048ec:	42ab      	cmp	r3, r5
 80048ee:	dc26      	bgt.n	800493e <_printf_common+0x96>
 80048f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048f4:	1e13      	subs	r3, r2, #0
 80048f6:	6822      	ldr	r2, [r4, #0]
 80048f8:	bf18      	it	ne
 80048fa:	2301      	movne	r3, #1
 80048fc:	0692      	lsls	r2, r2, #26
 80048fe:	d42b      	bmi.n	8004958 <_printf_common+0xb0>
 8004900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004904:	4649      	mov	r1, r9
 8004906:	4638      	mov	r0, r7
 8004908:	47c0      	blx	r8
 800490a:	3001      	adds	r0, #1
 800490c:	d01e      	beq.n	800494c <_printf_common+0xa4>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	68e5      	ldr	r5, [r4, #12]
 8004912:	6832      	ldr	r2, [r6, #0]
 8004914:	f003 0306 	and.w	r3, r3, #6
 8004918:	2b04      	cmp	r3, #4
 800491a:	bf08      	it	eq
 800491c:	1aad      	subeq	r5, r5, r2
 800491e:	68a3      	ldr	r3, [r4, #8]
 8004920:	6922      	ldr	r2, [r4, #16]
 8004922:	bf0c      	ite	eq
 8004924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004928:	2500      	movne	r5, #0
 800492a:	4293      	cmp	r3, r2
 800492c:	bfc4      	itt	gt
 800492e:	1a9b      	subgt	r3, r3, r2
 8004930:	18ed      	addgt	r5, r5, r3
 8004932:	2600      	movs	r6, #0
 8004934:	341a      	adds	r4, #26
 8004936:	42b5      	cmp	r5, r6
 8004938:	d11a      	bne.n	8004970 <_printf_common+0xc8>
 800493a:	2000      	movs	r0, #0
 800493c:	e008      	b.n	8004950 <_printf_common+0xa8>
 800493e:	2301      	movs	r3, #1
 8004940:	4652      	mov	r2, sl
 8004942:	4649      	mov	r1, r9
 8004944:	4638      	mov	r0, r7
 8004946:	47c0      	blx	r8
 8004948:	3001      	adds	r0, #1
 800494a:	d103      	bne.n	8004954 <_printf_common+0xac>
 800494c:	f04f 30ff 	mov.w	r0, #4294967295
 8004950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004954:	3501      	adds	r5, #1
 8004956:	e7c6      	b.n	80048e6 <_printf_common+0x3e>
 8004958:	18e1      	adds	r1, r4, r3
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	2030      	movs	r0, #48	; 0x30
 800495e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004962:	4422      	add	r2, r4
 8004964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800496c:	3302      	adds	r3, #2
 800496e:	e7c7      	b.n	8004900 <_printf_common+0x58>
 8004970:	2301      	movs	r3, #1
 8004972:	4622      	mov	r2, r4
 8004974:	4649      	mov	r1, r9
 8004976:	4638      	mov	r0, r7
 8004978:	47c0      	blx	r8
 800497a:	3001      	adds	r0, #1
 800497c:	d0e6      	beq.n	800494c <_printf_common+0xa4>
 800497e:	3601      	adds	r6, #1
 8004980:	e7d9      	b.n	8004936 <_printf_common+0x8e>
	...

08004984 <_printf_i>:
 8004984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004988:	460c      	mov	r4, r1
 800498a:	4691      	mov	r9, r2
 800498c:	7e27      	ldrb	r7, [r4, #24]
 800498e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004990:	2f78      	cmp	r7, #120	; 0x78
 8004992:	4680      	mov	r8, r0
 8004994:	469a      	mov	sl, r3
 8004996:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800499a:	d807      	bhi.n	80049ac <_printf_i+0x28>
 800499c:	2f62      	cmp	r7, #98	; 0x62
 800499e:	d80a      	bhi.n	80049b6 <_printf_i+0x32>
 80049a0:	2f00      	cmp	r7, #0
 80049a2:	f000 80d8 	beq.w	8004b56 <_printf_i+0x1d2>
 80049a6:	2f58      	cmp	r7, #88	; 0x58
 80049a8:	f000 80a3 	beq.w	8004af2 <_printf_i+0x16e>
 80049ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049b4:	e03a      	b.n	8004a2c <_printf_i+0xa8>
 80049b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049ba:	2b15      	cmp	r3, #21
 80049bc:	d8f6      	bhi.n	80049ac <_printf_i+0x28>
 80049be:	a001      	add	r0, pc, #4	; (adr r0, 80049c4 <_printf_i+0x40>)
 80049c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80049c4:	08004a1d 	.word	0x08004a1d
 80049c8:	08004a31 	.word	0x08004a31
 80049cc:	080049ad 	.word	0x080049ad
 80049d0:	080049ad 	.word	0x080049ad
 80049d4:	080049ad 	.word	0x080049ad
 80049d8:	080049ad 	.word	0x080049ad
 80049dc:	08004a31 	.word	0x08004a31
 80049e0:	080049ad 	.word	0x080049ad
 80049e4:	080049ad 	.word	0x080049ad
 80049e8:	080049ad 	.word	0x080049ad
 80049ec:	080049ad 	.word	0x080049ad
 80049f0:	08004b3d 	.word	0x08004b3d
 80049f4:	08004a61 	.word	0x08004a61
 80049f8:	08004b1f 	.word	0x08004b1f
 80049fc:	080049ad 	.word	0x080049ad
 8004a00:	080049ad 	.word	0x080049ad
 8004a04:	08004b5f 	.word	0x08004b5f
 8004a08:	080049ad 	.word	0x080049ad
 8004a0c:	08004a61 	.word	0x08004a61
 8004a10:	080049ad 	.word	0x080049ad
 8004a14:	080049ad 	.word	0x080049ad
 8004a18:	08004b27 	.word	0x08004b27
 8004a1c:	680b      	ldr	r3, [r1, #0]
 8004a1e:	1d1a      	adds	r2, r3, #4
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	600a      	str	r2, [r1, #0]
 8004a24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0a3      	b.n	8004b78 <_printf_i+0x1f4>
 8004a30:	6825      	ldr	r5, [r4, #0]
 8004a32:	6808      	ldr	r0, [r1, #0]
 8004a34:	062e      	lsls	r6, r5, #24
 8004a36:	f100 0304 	add.w	r3, r0, #4
 8004a3a:	d50a      	bpl.n	8004a52 <_printf_i+0xce>
 8004a3c:	6805      	ldr	r5, [r0, #0]
 8004a3e:	600b      	str	r3, [r1, #0]
 8004a40:	2d00      	cmp	r5, #0
 8004a42:	da03      	bge.n	8004a4c <_printf_i+0xc8>
 8004a44:	232d      	movs	r3, #45	; 0x2d
 8004a46:	426d      	negs	r5, r5
 8004a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a4c:	485e      	ldr	r0, [pc, #376]	; (8004bc8 <_printf_i+0x244>)
 8004a4e:	230a      	movs	r3, #10
 8004a50:	e019      	b.n	8004a86 <_printf_i+0x102>
 8004a52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a56:	6805      	ldr	r5, [r0, #0]
 8004a58:	600b      	str	r3, [r1, #0]
 8004a5a:	bf18      	it	ne
 8004a5c:	b22d      	sxthne	r5, r5
 8004a5e:	e7ef      	b.n	8004a40 <_printf_i+0xbc>
 8004a60:	680b      	ldr	r3, [r1, #0]
 8004a62:	6825      	ldr	r5, [r4, #0]
 8004a64:	1d18      	adds	r0, r3, #4
 8004a66:	6008      	str	r0, [r1, #0]
 8004a68:	0628      	lsls	r0, r5, #24
 8004a6a:	d501      	bpl.n	8004a70 <_printf_i+0xec>
 8004a6c:	681d      	ldr	r5, [r3, #0]
 8004a6e:	e002      	b.n	8004a76 <_printf_i+0xf2>
 8004a70:	0669      	lsls	r1, r5, #25
 8004a72:	d5fb      	bpl.n	8004a6c <_printf_i+0xe8>
 8004a74:	881d      	ldrh	r5, [r3, #0]
 8004a76:	4854      	ldr	r0, [pc, #336]	; (8004bc8 <_printf_i+0x244>)
 8004a78:	2f6f      	cmp	r7, #111	; 0x6f
 8004a7a:	bf0c      	ite	eq
 8004a7c:	2308      	moveq	r3, #8
 8004a7e:	230a      	movne	r3, #10
 8004a80:	2100      	movs	r1, #0
 8004a82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a86:	6866      	ldr	r6, [r4, #4]
 8004a88:	60a6      	str	r6, [r4, #8]
 8004a8a:	2e00      	cmp	r6, #0
 8004a8c:	bfa2      	ittt	ge
 8004a8e:	6821      	ldrge	r1, [r4, #0]
 8004a90:	f021 0104 	bicge.w	r1, r1, #4
 8004a94:	6021      	strge	r1, [r4, #0]
 8004a96:	b90d      	cbnz	r5, 8004a9c <_printf_i+0x118>
 8004a98:	2e00      	cmp	r6, #0
 8004a9a:	d04d      	beq.n	8004b38 <_printf_i+0x1b4>
 8004a9c:	4616      	mov	r6, r2
 8004a9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004aa2:	fb03 5711 	mls	r7, r3, r1, r5
 8004aa6:	5dc7      	ldrb	r7, [r0, r7]
 8004aa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004aac:	462f      	mov	r7, r5
 8004aae:	42bb      	cmp	r3, r7
 8004ab0:	460d      	mov	r5, r1
 8004ab2:	d9f4      	bls.n	8004a9e <_printf_i+0x11a>
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d10b      	bne.n	8004ad0 <_printf_i+0x14c>
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	07df      	lsls	r7, r3, #31
 8004abc:	d508      	bpl.n	8004ad0 <_printf_i+0x14c>
 8004abe:	6923      	ldr	r3, [r4, #16]
 8004ac0:	6861      	ldr	r1, [r4, #4]
 8004ac2:	4299      	cmp	r1, r3
 8004ac4:	bfde      	ittt	le
 8004ac6:	2330      	movle	r3, #48	; 0x30
 8004ac8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004acc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ad0:	1b92      	subs	r2, r2, r6
 8004ad2:	6122      	str	r2, [r4, #16]
 8004ad4:	f8cd a000 	str.w	sl, [sp]
 8004ad8:	464b      	mov	r3, r9
 8004ada:	aa03      	add	r2, sp, #12
 8004adc:	4621      	mov	r1, r4
 8004ade:	4640      	mov	r0, r8
 8004ae0:	f7ff fee2 	bl	80048a8 <_printf_common>
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	d14c      	bne.n	8004b82 <_printf_i+0x1fe>
 8004ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aec:	b004      	add	sp, #16
 8004aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af2:	4835      	ldr	r0, [pc, #212]	; (8004bc8 <_printf_i+0x244>)
 8004af4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	680e      	ldr	r6, [r1, #0]
 8004afc:	061f      	lsls	r7, r3, #24
 8004afe:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b02:	600e      	str	r6, [r1, #0]
 8004b04:	d514      	bpl.n	8004b30 <_printf_i+0x1ac>
 8004b06:	07d9      	lsls	r1, r3, #31
 8004b08:	bf44      	itt	mi
 8004b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8004b0e:	6023      	strmi	r3, [r4, #0]
 8004b10:	b91d      	cbnz	r5, 8004b1a <_printf_i+0x196>
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	f023 0320 	bic.w	r3, r3, #32
 8004b18:	6023      	str	r3, [r4, #0]
 8004b1a:	2310      	movs	r3, #16
 8004b1c:	e7b0      	b.n	8004a80 <_printf_i+0xfc>
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	f043 0320 	orr.w	r3, r3, #32
 8004b24:	6023      	str	r3, [r4, #0]
 8004b26:	2378      	movs	r3, #120	; 0x78
 8004b28:	4828      	ldr	r0, [pc, #160]	; (8004bcc <_printf_i+0x248>)
 8004b2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b2e:	e7e3      	b.n	8004af8 <_printf_i+0x174>
 8004b30:	065e      	lsls	r6, r3, #25
 8004b32:	bf48      	it	mi
 8004b34:	b2ad      	uxthmi	r5, r5
 8004b36:	e7e6      	b.n	8004b06 <_printf_i+0x182>
 8004b38:	4616      	mov	r6, r2
 8004b3a:	e7bb      	b.n	8004ab4 <_printf_i+0x130>
 8004b3c:	680b      	ldr	r3, [r1, #0]
 8004b3e:	6826      	ldr	r6, [r4, #0]
 8004b40:	6960      	ldr	r0, [r4, #20]
 8004b42:	1d1d      	adds	r5, r3, #4
 8004b44:	600d      	str	r5, [r1, #0]
 8004b46:	0635      	lsls	r5, r6, #24
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	d501      	bpl.n	8004b50 <_printf_i+0x1cc>
 8004b4c:	6018      	str	r0, [r3, #0]
 8004b4e:	e002      	b.n	8004b56 <_printf_i+0x1d2>
 8004b50:	0671      	lsls	r1, r6, #25
 8004b52:	d5fb      	bpl.n	8004b4c <_printf_i+0x1c8>
 8004b54:	8018      	strh	r0, [r3, #0]
 8004b56:	2300      	movs	r3, #0
 8004b58:	6123      	str	r3, [r4, #16]
 8004b5a:	4616      	mov	r6, r2
 8004b5c:	e7ba      	b.n	8004ad4 <_printf_i+0x150>
 8004b5e:	680b      	ldr	r3, [r1, #0]
 8004b60:	1d1a      	adds	r2, r3, #4
 8004b62:	600a      	str	r2, [r1, #0]
 8004b64:	681e      	ldr	r6, [r3, #0]
 8004b66:	6862      	ldr	r2, [r4, #4]
 8004b68:	2100      	movs	r1, #0
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	f7fb fb40 	bl	80001f0 <memchr>
 8004b70:	b108      	cbz	r0, 8004b76 <_printf_i+0x1f2>
 8004b72:	1b80      	subs	r0, r0, r6
 8004b74:	6060      	str	r0, [r4, #4]
 8004b76:	6863      	ldr	r3, [r4, #4]
 8004b78:	6123      	str	r3, [r4, #16]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b80:	e7a8      	b.n	8004ad4 <_printf_i+0x150>
 8004b82:	6923      	ldr	r3, [r4, #16]
 8004b84:	4632      	mov	r2, r6
 8004b86:	4649      	mov	r1, r9
 8004b88:	4640      	mov	r0, r8
 8004b8a:	47d0      	blx	sl
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d0ab      	beq.n	8004ae8 <_printf_i+0x164>
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	079b      	lsls	r3, r3, #30
 8004b94:	d413      	bmi.n	8004bbe <_printf_i+0x23a>
 8004b96:	68e0      	ldr	r0, [r4, #12]
 8004b98:	9b03      	ldr	r3, [sp, #12]
 8004b9a:	4298      	cmp	r0, r3
 8004b9c:	bfb8      	it	lt
 8004b9e:	4618      	movlt	r0, r3
 8004ba0:	e7a4      	b.n	8004aec <_printf_i+0x168>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	4632      	mov	r2, r6
 8004ba6:	4649      	mov	r1, r9
 8004ba8:	4640      	mov	r0, r8
 8004baa:	47d0      	blx	sl
 8004bac:	3001      	adds	r0, #1
 8004bae:	d09b      	beq.n	8004ae8 <_printf_i+0x164>
 8004bb0:	3501      	adds	r5, #1
 8004bb2:	68e3      	ldr	r3, [r4, #12]
 8004bb4:	9903      	ldr	r1, [sp, #12]
 8004bb6:	1a5b      	subs	r3, r3, r1
 8004bb8:	42ab      	cmp	r3, r5
 8004bba:	dcf2      	bgt.n	8004ba2 <_printf_i+0x21e>
 8004bbc:	e7eb      	b.n	8004b96 <_printf_i+0x212>
 8004bbe:	2500      	movs	r5, #0
 8004bc0:	f104 0619 	add.w	r6, r4, #25
 8004bc4:	e7f5      	b.n	8004bb2 <_printf_i+0x22e>
 8004bc6:	bf00      	nop
 8004bc8:	08004ef1 	.word	0x08004ef1
 8004bcc:	08004f02 	.word	0x08004f02

08004bd0 <memcpy>:
 8004bd0:	440a      	add	r2, r1
 8004bd2:	4291      	cmp	r1, r2
 8004bd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bd8:	d100      	bne.n	8004bdc <memcpy+0xc>
 8004bda:	4770      	bx	lr
 8004bdc:	b510      	push	{r4, lr}
 8004bde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004be2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004be6:	4291      	cmp	r1, r2
 8004be8:	d1f9      	bne.n	8004bde <memcpy+0xe>
 8004bea:	bd10      	pop	{r4, pc}

08004bec <memmove>:
 8004bec:	4288      	cmp	r0, r1
 8004bee:	b510      	push	{r4, lr}
 8004bf0:	eb01 0402 	add.w	r4, r1, r2
 8004bf4:	d902      	bls.n	8004bfc <memmove+0x10>
 8004bf6:	4284      	cmp	r4, r0
 8004bf8:	4623      	mov	r3, r4
 8004bfa:	d807      	bhi.n	8004c0c <memmove+0x20>
 8004bfc:	1e43      	subs	r3, r0, #1
 8004bfe:	42a1      	cmp	r1, r4
 8004c00:	d008      	beq.n	8004c14 <memmove+0x28>
 8004c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c0a:	e7f8      	b.n	8004bfe <memmove+0x12>
 8004c0c:	4402      	add	r2, r0
 8004c0e:	4601      	mov	r1, r0
 8004c10:	428a      	cmp	r2, r1
 8004c12:	d100      	bne.n	8004c16 <memmove+0x2a>
 8004c14:	bd10      	pop	{r4, pc}
 8004c16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c1e:	e7f7      	b.n	8004c10 <memmove+0x24>

08004c20 <_free_r>:
 8004c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c22:	2900      	cmp	r1, #0
 8004c24:	d048      	beq.n	8004cb8 <_free_r+0x98>
 8004c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c2a:	9001      	str	r0, [sp, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8004c32:	bfb8      	it	lt
 8004c34:	18e4      	addlt	r4, r4, r3
 8004c36:	f000 f8d3 	bl	8004de0 <__malloc_lock>
 8004c3a:	4a20      	ldr	r2, [pc, #128]	; (8004cbc <_free_r+0x9c>)
 8004c3c:	9801      	ldr	r0, [sp, #4]
 8004c3e:	6813      	ldr	r3, [r2, #0]
 8004c40:	4615      	mov	r5, r2
 8004c42:	b933      	cbnz	r3, 8004c52 <_free_r+0x32>
 8004c44:	6063      	str	r3, [r4, #4]
 8004c46:	6014      	str	r4, [r2, #0]
 8004c48:	b003      	add	sp, #12
 8004c4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c4e:	f000 b8cd 	b.w	8004dec <__malloc_unlock>
 8004c52:	42a3      	cmp	r3, r4
 8004c54:	d90b      	bls.n	8004c6e <_free_r+0x4e>
 8004c56:	6821      	ldr	r1, [r4, #0]
 8004c58:	1862      	adds	r2, r4, r1
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	bf04      	itt	eq
 8004c5e:	681a      	ldreq	r2, [r3, #0]
 8004c60:	685b      	ldreq	r3, [r3, #4]
 8004c62:	6063      	str	r3, [r4, #4]
 8004c64:	bf04      	itt	eq
 8004c66:	1852      	addeq	r2, r2, r1
 8004c68:	6022      	streq	r2, [r4, #0]
 8004c6a:	602c      	str	r4, [r5, #0]
 8004c6c:	e7ec      	b.n	8004c48 <_free_r+0x28>
 8004c6e:	461a      	mov	r2, r3
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	b10b      	cbz	r3, 8004c78 <_free_r+0x58>
 8004c74:	42a3      	cmp	r3, r4
 8004c76:	d9fa      	bls.n	8004c6e <_free_r+0x4e>
 8004c78:	6811      	ldr	r1, [r2, #0]
 8004c7a:	1855      	adds	r5, r2, r1
 8004c7c:	42a5      	cmp	r5, r4
 8004c7e:	d10b      	bne.n	8004c98 <_free_r+0x78>
 8004c80:	6824      	ldr	r4, [r4, #0]
 8004c82:	4421      	add	r1, r4
 8004c84:	1854      	adds	r4, r2, r1
 8004c86:	42a3      	cmp	r3, r4
 8004c88:	6011      	str	r1, [r2, #0]
 8004c8a:	d1dd      	bne.n	8004c48 <_free_r+0x28>
 8004c8c:	681c      	ldr	r4, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	6053      	str	r3, [r2, #4]
 8004c92:	4421      	add	r1, r4
 8004c94:	6011      	str	r1, [r2, #0]
 8004c96:	e7d7      	b.n	8004c48 <_free_r+0x28>
 8004c98:	d902      	bls.n	8004ca0 <_free_r+0x80>
 8004c9a:	230c      	movs	r3, #12
 8004c9c:	6003      	str	r3, [r0, #0]
 8004c9e:	e7d3      	b.n	8004c48 <_free_r+0x28>
 8004ca0:	6825      	ldr	r5, [r4, #0]
 8004ca2:	1961      	adds	r1, r4, r5
 8004ca4:	428b      	cmp	r3, r1
 8004ca6:	bf04      	itt	eq
 8004ca8:	6819      	ldreq	r1, [r3, #0]
 8004caa:	685b      	ldreq	r3, [r3, #4]
 8004cac:	6063      	str	r3, [r4, #4]
 8004cae:	bf04      	itt	eq
 8004cb0:	1949      	addeq	r1, r1, r5
 8004cb2:	6021      	streq	r1, [r4, #0]
 8004cb4:	6054      	str	r4, [r2, #4]
 8004cb6:	e7c7      	b.n	8004c48 <_free_r+0x28>
 8004cb8:	b003      	add	sp, #12
 8004cba:	bd30      	pop	{r4, r5, pc}
 8004cbc:	20000090 	.word	0x20000090

08004cc0 <_malloc_r>:
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	1ccd      	adds	r5, r1, #3
 8004cc4:	f025 0503 	bic.w	r5, r5, #3
 8004cc8:	3508      	adds	r5, #8
 8004cca:	2d0c      	cmp	r5, #12
 8004ccc:	bf38      	it	cc
 8004cce:	250c      	movcc	r5, #12
 8004cd0:	2d00      	cmp	r5, #0
 8004cd2:	4606      	mov	r6, r0
 8004cd4:	db01      	blt.n	8004cda <_malloc_r+0x1a>
 8004cd6:	42a9      	cmp	r1, r5
 8004cd8:	d903      	bls.n	8004ce2 <_malloc_r+0x22>
 8004cda:	230c      	movs	r3, #12
 8004cdc:	6033      	str	r3, [r6, #0]
 8004cde:	2000      	movs	r0, #0
 8004ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce2:	f000 f87d 	bl	8004de0 <__malloc_lock>
 8004ce6:	4921      	ldr	r1, [pc, #132]	; (8004d6c <_malloc_r+0xac>)
 8004ce8:	680a      	ldr	r2, [r1, #0]
 8004cea:	4614      	mov	r4, r2
 8004cec:	b99c      	cbnz	r4, 8004d16 <_malloc_r+0x56>
 8004cee:	4f20      	ldr	r7, [pc, #128]	; (8004d70 <_malloc_r+0xb0>)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	b923      	cbnz	r3, 8004cfe <_malloc_r+0x3e>
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	f000 f862 	bl	8004dc0 <_sbrk_r>
 8004cfc:	6038      	str	r0, [r7, #0]
 8004cfe:	4629      	mov	r1, r5
 8004d00:	4630      	mov	r0, r6
 8004d02:	f000 f85d 	bl	8004dc0 <_sbrk_r>
 8004d06:	1c43      	adds	r3, r0, #1
 8004d08:	d123      	bne.n	8004d52 <_malloc_r+0x92>
 8004d0a:	230c      	movs	r3, #12
 8004d0c:	6033      	str	r3, [r6, #0]
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f000 f86c 	bl	8004dec <__malloc_unlock>
 8004d14:	e7e3      	b.n	8004cde <_malloc_r+0x1e>
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	1b5b      	subs	r3, r3, r5
 8004d1a:	d417      	bmi.n	8004d4c <_malloc_r+0x8c>
 8004d1c:	2b0b      	cmp	r3, #11
 8004d1e:	d903      	bls.n	8004d28 <_malloc_r+0x68>
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	441c      	add	r4, r3
 8004d24:	6025      	str	r5, [r4, #0]
 8004d26:	e004      	b.n	8004d32 <_malloc_r+0x72>
 8004d28:	6863      	ldr	r3, [r4, #4]
 8004d2a:	42a2      	cmp	r2, r4
 8004d2c:	bf0c      	ite	eq
 8004d2e:	600b      	streq	r3, [r1, #0]
 8004d30:	6053      	strne	r3, [r2, #4]
 8004d32:	4630      	mov	r0, r6
 8004d34:	f000 f85a 	bl	8004dec <__malloc_unlock>
 8004d38:	f104 000b 	add.w	r0, r4, #11
 8004d3c:	1d23      	adds	r3, r4, #4
 8004d3e:	f020 0007 	bic.w	r0, r0, #7
 8004d42:	1ac2      	subs	r2, r0, r3
 8004d44:	d0cc      	beq.n	8004ce0 <_malloc_r+0x20>
 8004d46:	1a1b      	subs	r3, r3, r0
 8004d48:	50a3      	str	r3, [r4, r2]
 8004d4a:	e7c9      	b.n	8004ce0 <_malloc_r+0x20>
 8004d4c:	4622      	mov	r2, r4
 8004d4e:	6864      	ldr	r4, [r4, #4]
 8004d50:	e7cc      	b.n	8004cec <_malloc_r+0x2c>
 8004d52:	1cc4      	adds	r4, r0, #3
 8004d54:	f024 0403 	bic.w	r4, r4, #3
 8004d58:	42a0      	cmp	r0, r4
 8004d5a:	d0e3      	beq.n	8004d24 <_malloc_r+0x64>
 8004d5c:	1a21      	subs	r1, r4, r0
 8004d5e:	4630      	mov	r0, r6
 8004d60:	f000 f82e 	bl	8004dc0 <_sbrk_r>
 8004d64:	3001      	adds	r0, #1
 8004d66:	d1dd      	bne.n	8004d24 <_malloc_r+0x64>
 8004d68:	e7cf      	b.n	8004d0a <_malloc_r+0x4a>
 8004d6a:	bf00      	nop
 8004d6c:	20000090 	.word	0x20000090
 8004d70:	20000094 	.word	0x20000094

08004d74 <_realloc_r>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	4607      	mov	r7, r0
 8004d78:	4614      	mov	r4, r2
 8004d7a:	460e      	mov	r6, r1
 8004d7c:	b921      	cbnz	r1, 8004d88 <_realloc_r+0x14>
 8004d7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d82:	4611      	mov	r1, r2
 8004d84:	f7ff bf9c 	b.w	8004cc0 <_malloc_r>
 8004d88:	b922      	cbnz	r2, 8004d94 <_realloc_r+0x20>
 8004d8a:	f7ff ff49 	bl	8004c20 <_free_r>
 8004d8e:	4625      	mov	r5, r4
 8004d90:	4628      	mov	r0, r5
 8004d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d94:	f000 f830 	bl	8004df8 <_malloc_usable_size_r>
 8004d98:	42a0      	cmp	r0, r4
 8004d9a:	d20f      	bcs.n	8004dbc <_realloc_r+0x48>
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	4638      	mov	r0, r7
 8004da0:	f7ff ff8e 	bl	8004cc0 <_malloc_r>
 8004da4:	4605      	mov	r5, r0
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d0f2      	beq.n	8004d90 <_realloc_r+0x1c>
 8004daa:	4631      	mov	r1, r6
 8004dac:	4622      	mov	r2, r4
 8004dae:	f7ff ff0f 	bl	8004bd0 <memcpy>
 8004db2:	4631      	mov	r1, r6
 8004db4:	4638      	mov	r0, r7
 8004db6:	f7ff ff33 	bl	8004c20 <_free_r>
 8004dba:	e7e9      	b.n	8004d90 <_realloc_r+0x1c>
 8004dbc:	4635      	mov	r5, r6
 8004dbe:	e7e7      	b.n	8004d90 <_realloc_r+0x1c>

08004dc0 <_sbrk_r>:
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	4d06      	ldr	r5, [pc, #24]	; (8004ddc <_sbrk_r+0x1c>)
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	4608      	mov	r0, r1
 8004dca:	602b      	str	r3, [r5, #0]
 8004dcc:	f7fc fb56 	bl	800147c <_sbrk>
 8004dd0:	1c43      	adds	r3, r0, #1
 8004dd2:	d102      	bne.n	8004dda <_sbrk_r+0x1a>
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	b103      	cbz	r3, 8004dda <_sbrk_r+0x1a>
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	bd38      	pop	{r3, r4, r5, pc}
 8004ddc:	2000018c 	.word	0x2000018c

08004de0 <__malloc_lock>:
 8004de0:	4801      	ldr	r0, [pc, #4]	; (8004de8 <__malloc_lock+0x8>)
 8004de2:	f000 b811 	b.w	8004e08 <__retarget_lock_acquire_recursive>
 8004de6:	bf00      	nop
 8004de8:	20000194 	.word	0x20000194

08004dec <__malloc_unlock>:
 8004dec:	4801      	ldr	r0, [pc, #4]	; (8004df4 <__malloc_unlock+0x8>)
 8004dee:	f000 b80c 	b.w	8004e0a <__retarget_lock_release_recursive>
 8004df2:	bf00      	nop
 8004df4:	20000194 	.word	0x20000194

08004df8 <_malloc_usable_size_r>:
 8004df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dfc:	1f18      	subs	r0, r3, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bfbc      	itt	lt
 8004e02:	580b      	ldrlt	r3, [r1, r0]
 8004e04:	18c0      	addlt	r0, r0, r3
 8004e06:	4770      	bx	lr

08004e08 <__retarget_lock_acquire_recursive>:
 8004e08:	4770      	bx	lr

08004e0a <__retarget_lock_release_recursive>:
 8004e0a:	4770      	bx	lr

08004e0c <_init>:
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	bf00      	nop
 8004e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e12:	bc08      	pop	{r3}
 8004e14:	469e      	mov	lr, r3
 8004e16:	4770      	bx	lr

08004e18 <_fini>:
 8004e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1a:	bf00      	nop
 8004e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1e:	bc08      	pop	{r3}
 8004e20:	469e      	mov	lr, r3
 8004e22:	4770      	bx	lr
